Imports System.ComponentModel
Imports Telecom.Android
Imports System.IO
Imports System.Security.Cryptography
Module ScanModules

    Public ScanResult As Boolean = False
    Public isVirus As Boolean = False

#Region "VIRUS SCAN"

    Public WithEvents bwkScan As New BackgroundWorker
    Public Checksum As String = ""
    Public StaticName As String = ""
    Public Sub createDir()

        If Not Directory.Exists("Temp") Then
            Directory.CreateDirectory("Temp")
            Dim dirInfo As DirectoryInfo = New DirectoryInfo("Temp")
        Else
            For Each ScanFile As String In Directory.GetFiles("Temp")
                File.Delete(ScanFile)
            Next
            For Each ScanFolder As String In Directory.GetDirectories("Temp")
                Directory.Delete(ScanFolder, True)
            Next
        End If

    End Sub
    Public Sub ScanningVirus()

        With bwkScan

            .WorkerSupportsCancellation = True
            If Not .IsBusy Then bwkScan.RunWorkerAsync()

            While .IsBusy
                Application.DoEvents()
                Threading.Thread.Sleep(100)
            End While

        End With

    End Sub
    Private Sub bwkScan_DoWork(sender As Object, e As DoWorkEventArgs) Handles bwkScan.DoWork
        If Not bwkScan.CancellationPending Then
            Try
                MatchtoChecksum()
            Catch ex As Exception
            End Try
        End If
    End Sub
    Private Function generateSHA1Hash(ApkBryFile As String) As String

        Dim hash_hex As String = ""

        Try
            Dim hash = SHA1.Create()
            Dim hashValue() As Byte

            Dim fileStream As FileStream = File.OpenRead(ApkBryFile)
            fileStream.Position = 0
            hashValue = hash.ComputeHash(fileStream)
            hash_hex = PrintByteArray(hashValue)
            fileStream.Close()

        Catch ex As Exception

        End Try

        Return hash_hex
    End Function
    Private Function PrintByteArray(array() As Byte)

        Dim hex_value As String = ""

        For i As Integer = 0 To array.Length - 1
            hex_value += array(i).ToString("X2")
        Next

        Return hex_value.ToLower
    End Function
    Private Sub MatchtoChecksum()

        isVirus = False

        'Try

        'pulling apk 
        If Not currentPath.Contains("/system/bin/uncrypt") Then
            Dim adbCmd As String = Adb.RunAdbCommand(Device, "pull """ & currentPath & """ Temp\" & currentName)
            If adbCmd.Contains("remote object ") Or adbCmd.Contains("Permission denied") Then

                If isRoot Then
                    If currentPath.StartsWith("/sbin") Then Adb.RunAdbShellCommandNoReturn(Device, True, "mount -o remount,rw / /")
                    Adb.RunAdbShellCommandNoReturn(Device, True, "dd if=" & currentPath & " of=/data/local/tmp/" & currentName)
                    Adb.RunAdbShellCommandNoReturn(Device, True, "chmod 777 /data/local/tmp/" & currentName)
                    Adb.RunAdbCommandNoReturn(Device, "pull ""/data/local/tmp/" & currentName & """ Temp\" & currentName)
                    Adb.RunAdbShellCommandNoReturn(Device, True, "rm -r /data/local/tmp/*")
                    Adb.RunAdbShellCommandNoReturn(Device, True, "rm -r /data/local/tmp/.*")
                ElseIf isCustom Then
                    If currentPath.StartsWith("/sbin") Then RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "mount -o remount,rw / /")
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "dd if=" & currentPath & " of=/data/local/tmp/" & currentName)
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "chmod 777 /data/local/tmp/" & currentName)
                    Adb.RunAdbCommandNoReturn(Device, "pull ""/data/local/tmp/" & currentName & """ Temp\" & currentName)
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r /data/lcoal/tmp/*")
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r /data/local/tmp/.*")
                End If

            End If

            Dim FileHash As String = generateSHA1Hash("Temp\" & currentName)

            'check package name
            If currentName.EndsWith(".apk") Then
                Dim apkPackageName As String = getPackageName(Aapt.RunAaptCommand("dump badging Temp\" & currentName))

                If ReportChecksum = "" Then
                    ReportChecksum = currentPath & " > " & FileHash & " > " & apkPackageName
                Else
                    ReportChecksum += vbNewLine & currentPath & " > " & FileHash & " > " & apkPackageName
                End If

                If CheckVirusPackageName(apkPackageName) Then
                    isVirus = True
                End If

            End If

            If Not isVirus Then

                'Check checksum
                If ReportChecksum = "" Then
                    ReportChecksum = currentPath & " > " & FileHash
                Else
                    ReportChecksum += vbNewLine & currentPath & " > " & FileHash
                End If

                If isCustom And currentPath.Contains(CustomName) Then Exit Sub
                If FileHash.StartsWith("da39a3ee5e6b4b0d3255bfef95601890afd80709") And Not (currentPath.EndsWith(".apk") Or currentPath.StartsWith("/system/xbin") Or currentPath.StartsWith("/system/bin")) Then Exit Sub
                If currentPath = "/system/etc/install-recovery.sh" Or currentPath = "/system/bin/debuggerd" Or currentPath = "/data/btaddr" Or currentPath = "/system/bin/aee_aed" Then Exit Sub

                Using r As New StringReader(Checksum)
                    Dim line As String

                    While Not r.Peek = -1
                        line = r.ReadLine

                        If line = FileHash Then
                            isVirus = True
                            Exit While
                        End If

                    End While
                End Using

            End If

        End If

        'Catch ex As Exception

        'End Try

    End Sub
    Private Function getPackageName(list As String) As String

        Dim result As String = ""
        Using r As New StringReader(list)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("package: name") Then
                    result = line.Substring(line.IndexOf("=") + 1)
                    If result.Contains("versionCode") Then
                        result = result.Substring(0, result.IndexOf("versionCode") - 1)
                    End If
                    If result.Contains("'") Then result = result.Replace("'", "")
                End If

            End While

        End Using

        Return result
    End Function
    Private Function CheckVirusPackageName(pkgName As String) As Boolean
        Dim result As Boolean = False

        Using r As New StringReader(StaticName)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If pkgName = line Then
                    result = True
                End If

            End While
        End Using

        Return result
    End Function

#End Region

End Module
