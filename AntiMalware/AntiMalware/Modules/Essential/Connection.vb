'Connection Module - powered by TELEComTechnology

Imports System.ComponentModel
Imports System.IO
Imports Telecom.Android

Module Connection

#Region "FIELDS"

    'Controller
    Public Android As AndroidController
    Public Device As Device

    'for timer
    Public WithEvents tmConnection As New Timer

    'for background worker
    Private WithEvents WorkerInit As New BackgroundWorker
    Private WithEvents WorkerDetect As New BackgroundWorker
    Private WithEvents bwkPkgCollect As New BackgroundWorker
    Private WithEvents bwkButtonControl As New BackgroundWorker

#End Region

#Region "CONNECTION"

    Public State As String = "Disconnected"
    Private sAuth As Boolean = False
    Private sOffline As Boolean = False
    Private sOnline As Boolean = False
    Private sUnknown As Boolean = False
    Private sDisconnect As Boolean = False
    Private sDetect As Boolean = False

    Private sConnect As Boolean = False
    Public Sub tmConnection_Tick() Handles tmConnection.Tick

        Try
            If Not WorkerInit.IsBusy Then WorkerInit.RunWorkerAsync()
        Catch ex As Exception

        End Try

    End Sub
    Private Sub WorkerInit_DoWork(sender As Object, e As DoWorkEventArgs) Handles WorkerInit.DoWork
        Try
            If Not WorkerInit.CancellationPending Then

                If Android.HasConnectedDevices Then
                    sDetect = True
                Else
                    sDetect = False
                    End If
                End If

        Catch ex As Exception

        End Try
    End Sub
    Private Sub WorkerInit_RunWorkerCompleted(sender As Object, e As RunWorkerCompletedEventArgs) Handles WorkerInit.RunWorkerCompleted
        Try
            If sDetect Then

                If Not WorkerDetect.IsBusy Then WorkerDetect.RunWorkerAsync()
            Else
                If sConnect = False Then
                    sConnect = True
                    State = "Disconnected"
                    sAuth = False
                    sOffline = False
                    sOnline = False
                    sUnknown = False

                    offlineState()

                End If

                'checkAdbDriver()

            End If

        Catch ex As Exception

        End Try

    End Sub
    Private Sub WorkerDetect_DoWork(sender As Object, e As DoWorkEventArgs) Handles WorkerDetect.DoWork
        If Not WorkerDetect.CancellationPending Then
            Try

                Dim serial As String = Android.ConnectedDevices(0)
                Device = Android.GetConnectedDevice(serial)
                State = Device.State.ToString()

            Catch ex As Exception
                e.Cancel = True
            End Try

        End If
    End Sub
    Private Sub WorkerDetect_RunWorkerCompleted(sender As Object, e As RunWorkerCompletedEventArgs) Handles WorkerDetect.RunWorkerCompleted
        If Not e.Cancelled Then

            Try
                With Form1

                    Select Case State

                        Case "UNAUTHORIZED"

                            If sAuth = False Then
                                sAuth = True
                                sOnline = False
                                sOffline = False
                                sUnknown = False
                                sConnect = False
                                .Status.Text = "Unauthorized"
                                .Progress.Text = "Please allow 'USB Debugging' dialogbox"
                            End If

                        Case "OFFLINE"

                            If sOffline = False Then
                                sOffline = True
                                sAuth = False
                                sOnline = False
                                sUnknown = False
                                sConnect = False
                                .Status.Text = "Offline"
                                .Progress.Text = "Please enable 'USB Debugging' in setting"
                            End If

                        Case "ONLINE"

                            If sOnline = False Then
                                sOnline = True
                                sOffline = False
                                sAuth = False
                                sUnknown = False
                                sConnect = False
                                .Status.Text = "Busy"
                                .Progress.Text = "Connecting device"
                                onlineState()
                            End If

                        Case "UNKNOWN"

                            If sUnknown = False Then
                                sUnknown = True
                                sOnline = False
                                sOffline = False
                                sAuth = False
                                sConnect = False
                                .Status.Text = "Unknown"
                                .Progress.Text = "Please allow 'USB Debugging' dialogbox"
                            End If

                    End Select

                End With

            Catch ex As Exception

            End Try

        End If
    End Sub

#End Region

#Region "PROPERTIES"
    Public Sub offlineState()

        With Form1

            If bwkScan.IsBusy Then bwkScan.CancelAsync()

            .Status.ForeColor = Color.White
            .Status.Text = "No Device"
            .Progress.ForeColor = Color.White
            .Progress.Text = "Ready to Connect"

            .lbModel.Text = ""
            .lbVersion.Text = ""
            .lbRoot.Text = ""
            .lblScan.Text = ""

            .lbApk.Text = ""
            .lbLibary.Text = ""
            .lbBinary.Text = ""

            apkNo = 0
            libNo = 0
            bryNo = 0

            ScanList = ""

            .butScan.ForeColor = Color.White
            .butScan.BorderColor = Color.White
            .butScan.Text = "Scan"

            .butFactory.ForeColor = Color.White
            .butFactory.BorderColor = Color.White
            .butJunk.ForeColor = Color.White
            .butJunk.BorderColor = Color.White
            .butDalvik.ForeColor = Color.White
            .butDalvik.BorderColor = Color.White

            .lbItems.Text = "Process"
            .lbScan.Text = "Information"
            .lbStatus.Text = "Status"

            .Log.Text = ""
            .Info.Text = ""
            .Virus.Text = ""

            .rdFull.Enabled = False
            .lbFull.ForeColor = Color.White
            .rdQuick.Enabled = False
            .lbQuick.ForeColor = Color.White
            .chkSus.Enabled = False
            .lblSus.ForeColor = Color.White

            .ObjectListView1.ClearObjects()
            .ProgBarPlus1.Value = 0
            .ProgBarPlus1.Visible = False

            resetInfoVariable()
            resetJunkVariable()
            resetScanVariable()
            resetCleanVariable()

        End With

    End Sub
    Public Sub busyState()
        With Form1
            .butFactory.ForeColor = Color.White
            .butFactory.BorderColor = Color.White
            .butJunk.ForeColor = Color.White
            .butJunk.BorderColor = Color.White
            .butDalvik.ForeColor = Color.White
            .butDalvik.BorderColor = Color.White
            .rdFull.Enabled = False
            .lbFull.ForeColor = Color.White
            .rdQuick.Enabled = False
            .lbQuick.ForeColor = Color.White
            .chkSus.Enabled = False
            .lblSus.ForeColor = Color.White
        End With
    End Sub
    Public Sub onlineState()

        With tmInformation
            .Interval = 500
            .Enabled = True
        End With

        With bwkPkgCollect
            .WorkerSupportsCancellation = True
            If Not .IsBusy Then .RunWorkerAsync()
        End With

    End Sub

#Region "INFO & PKG COLLECTING"

    Private infoBrand As String
    Private infoModel As String
    Public infoProductName As String
    Private infoVersion As String
    Private infoRoot As String
    Private infoScan As String
    Public infoArch As String

    Private apkNo As Integer = 0
    Private libNo As Integer = 0
    Private bryNo As Integer = 0

    Public TotalThreat As Integer = 0
    Public TotalFilterThreat As Integer = 0
    Public ScanList As String = ""
    Public FilterList As String = ""
    Public RawList As String = ""

    Public isRoot As Boolean = False
    Public isInsecure As Boolean = False
    Public isCustom As Boolean = False
    Public isMount As Boolean = False
    Public CustomName As String = ""

    Private WithEvents tmInformation As New Timer
    Private infoString As String
    Private Sub tmInformation_Tick() Handles tmInformation.Tick
        With Form1
            .Progress.Text = infoString
        End With
    End Sub

    Private Sub bwkPkgCollect_DoWork(sender As Object, e As DoWorkEventArgs) Handles bwkPkgCollect.DoWork
        If Not bwkPkgCollect.CancellationPending Then

            Try

                'get info
                infoString = "Gathering device informations"
                Dim getpropCmd As String = Adb.RunAdbShellCommand(Device, False, "getprop")

                infoBrand = getpropFormat(getpropCmd, "[ro.product.brand]")
                infoBrand = infoBrand.Substring(0, 1).ToUpper & infoBrand.Substring(1).ToLower
                infoModel = getpropFormat(getpropCmd, "[ro.product.model]")
                infoModel = If(infoModel = "", "Can't list", infoModel)

                If Not infoModel.ToUpper.Contains(infoBrand.ToUpper) Then
                    infoBrand += " " & infoModel
                Else
                    infoBrand = infoModel
                End If

                infoProductName = infoBrand

                infoVersion = androidVersionFormat(getpropFormat(getpropCmd, "[ro.build.version.release]"))
                infoVersion = If(infoVersion = "", "Can't list", infoVersion)

                infoArch = getpropFormat(getpropCmd, "[ro.product.cpu.abi]").Substring(0, 3).ToUpper

                'install busybox
                Adb.RunAdbCommandNoReturn(Device, "push Resources\TELEComArmLib.dll /data/local/tmp/busybox")
                Adb.RunAdbShellCommandNoReturn(Device, False, "chmod 6777 /data/local/tmp/busybox")

                'checking root status
                checkisRoot()

                'collect scan list
                infoString = "Collecting files from device to scan"
                collectFileLists()

            Catch ex As Exception

            End Try

        Else
            e.Cancel = True
        End If
    End Sub
    Private Sub bwkPkgCollect_RunWorkerCompleted(sender As Object, e As RunWorkerCompletedEventArgs) Handles bwkPkgCollect.RunWorkerCompleted
        If Not e.Cancelled Then
            With Form1

                tmInformation.Enabled = False

                .lbModel.Text = infoBrand

                .lbVersion.Text = infoVersion
                .lbRoot.Text = infoRoot

                If infoScan = "Need root for clean" Then
                    .lblScan.ForeColor = Color.Red
                    .lblScan.Text = infoScan
                Else
                    .lblScan.ForeColor = Color.GreenYellow
                    .lblScan.Text = infoScan
                End If

                .lbApk.Text = apkNo
                .lbLibary.Text = libNo
                .lbBinary.Text = bryNo

                .Status.ForeColor = Color.White
                .Status.Text = "Ready"
                .Progress.ForeColor = Color.White
                .Progress.Text = "Ready to Scan"

                .butScan.Text = "Scan"
                .butScan.ForeColor = Color.GreenYellow
                .butScan.BorderColor = Color.GreenYellow

                .butJunk.ForeColor = Color.GreenYellow
                .butJunk.BorderColor = Color.GreenYellow

                .butDalvik.ForeColor = Color.GreenYellow
                .butDalvik.BorderColor = Color.GreenYellow

                .butFactory.ForeColor = Color.GreenYellow
                .butFactory.BorderColor = Color.GreenYellow

                If isRoot Or isInsecure Or isCustom Then
                    .rdFull.Enabled = True
                    .rdFull.Checked = True
                    .lbFull.ForeColor = Color.GreenYellow

                    .rdQuick.Enabled = True
                    .lbQuick.ForeColor = Color.GreenYellow
                Else
                    .rdQuick.Enabled = True
                    .rdQuick.Checked = True
                    .lbQuick.ForeColor = Color.GreenYellow

                    .rdFull.Enabled = False
                    .lbFull.ForeColor = Color.White
                End If

                .chkSus.Enabled = True
                .lblSus.ForeColor = Color.GreenYellow

            End With

        End If
    End Sub

#Region "INFO FUNCTION"
    Private Function getpropFormat(txt As String, term As String) As String

        Dim temp As String = ""
        Dim result As String = ""

        Try

            Using r As New StringReader(txt)
                Dim line As String

                While Not r.Peek = -1
                    line = r.ReadLine()

                    If line.Contains(term) Then
                        temp = line
                    End If

                End While
            End Using

            If Not temp = "" Then
                result = temp.Substring(temp.IndexOf(":") + 2).Replace("[", "").Replace("]", "")
                result = result.Substring(0, 1).ToUpper() & result.Substring(1).ToLower
            End If

        Catch ex As Exception
            result = ""
        End Try

        If result = "Unknown" Then result = ""

        Return result
    End Function
    Private Function androidVersionFormat(txt As String) As String

        Dim result As String = ""

        If txt.StartsWith("7") Then
            result = txt & " (Nougat)"
        ElseIf txt.StartsWith("6") Then
            result = txt & " (Marshmallow)"
        ElseIf txt.StartsWith("5") Then
            result = txt & " (Lollipop)"
        ElseIf txt.StartsWith("4.4") Then
            result = txt & " (Kitkat)"
        ElseIf txt.StartsWith("4.3") Or txt.StartsWith("4.2") Or txt.StartsWith("4.1") Then
            result = txt & " (JellyBean)"
        ElseIf txt.StartsWith("4.0") Then
            result = txt & " (ICS)"
        ElseIf txt.StartsWith("3.0") Or txt.StartsWith("3.1") Or txt.StartsWith("3.2") Then
            result = txt & " (Honeycomb)"
        ElseIf txt.StartsWith("2.3") Then
            result = txt & " (Gingerbread)"
        ElseIf txt.StartsWith("2.2") Then
            result = txt & " (Froyo)"
        ElseIf txt.StartsWith("2.0") Or txt.StartsWith("2.1") Then
            result = txt & " (Eclair)"
        ElseIf txt.StartsWith("1.6") Then
            result = txt & " (Donut)"
        ElseIf txt.StartsWith("1.5") Then
            result = txt & " (Cupcake)"
        End If

        Return result

    End Function

#End Region

#Region "CHCECK ROOT ACCESS"
    Private Sub checkisRoot()

        infoString = "Checking is device custom kernel"
        If checkEngBuild() Then
            isInsecure = True
            isMount = True
        Else
            isInsecure = False
            isMount = False
        End If

        If Not isInsecure Then
            infoString = "Checking is device rooted"
            If checkRootAccess() Then
                isRoot = True
                isMount = True
            Else
                isRoot = False
                isMount = False
            End If
        End If

        If Not isRoot Then
            infoString = "Checking is device vunlnerability"
            If checkCustomBinary() Then
                isCustom = True
                isMount = True
            Else
                isCustom = False
                isMount = False
            End If

        End If

        'for root info
        If isInsecure Then
            infoRoot = "Custom Kernel"
        ElseIf isRoot Then
            infoRoot = "Rooted via user"
        ElseIf isCustom Then
            infoRoot = "Rooted via malware"
        Else
            infoRoot = "Non Rooted"
        End If

        'for scan and clean info
        If infoRoot = "Non Rooted" Then

            infoScan = "Need root for clean"

        ElseIf infoRoot = "Rooted via user" Or infoRoot = "Rooted via malware" Then

            If isRoot Then
                infoScan = Adb.RunAdbShellCommand(Device, False, "su -v")
                If infoScan.Length > 23 Then infoScan = infoScan.Substring(0, 20) & "..."
            ElseIf isCustom Then
                infoScan = RunAdbShellCustomBinary(Device, CustomName, False, "-v")
                If infoScan.Length > 23 Then infoScan = infoScan.Substring(0, 20) & "..."
            End If

        ElseIf infoRoot = "Custom Kernel" Then
            infoScan = "Adbd autorooted"
        End If

    End Sub

#Region "NORMAL ROOT"
    Private Function checkRootAccess() As Boolean
        Dim result As Boolean = False

        If Device.HasRoot Then
            Dim checkRoot As String = Adb.RunAdbShellCommand(Device, True, "echo Hello Kitty")
            If checkRoot = "Hello Kitty" Then
                result = True
            End If
        End If

        If result Then
            If checkMountPointSystem() Then
                'If checkMountPointSbin() Then
                result = True
                'Else
                'RepairmountPointNormalRoot()
                'If checkMountPointSbin() Then
                'result = True
                'Else
                'result = False
                'End If
                'End If
            Else
                RepairmountPointNormalRoot()
                If checkMountPointSystem() Then
                    If checkMountPointSbin() Then
                        result = True
                    Else
                        result = False
                    End If
                Else
                    result = False
                End If

            End If
        End If

        Return result
    End Function
    Private Function checkMountPointSystem() As Boolean

        Dim result As Boolean = False

        Adb.RunAdbShellCommandNoReturn(Device, True, "mount -o remount,ro /system /system")
        Adb.RunAdbShellCommandNoReturn(Device, True, "mount /system")
        Adb.RunAdbShellCommandNoReturn(Device, True, "mount -o remount,rw /system /system")

        Dim mountable As String = Adb.RunAdbShellCommand(Device, True, "mount")
        Using r As New StringReader(mountable)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.Contains(" /system ") And line.Contains(" rw,") Then
                    result = True
                    Exit While
                End If
            End While
        End Using

        Return result
    End Function
    Private Function checkMountPointSbin() As Boolean

        Dim result As Boolean = False

        Dim mountSys As String = Adb.RunAdbShellCommand(Device, True, "mount -o remount,rw / /")

        If mountSys = "" Then
            result = True
        End If

        Return result
    End Function
    Private Sub RepairmountPointNormalRoot()
        Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox killall e2fsck_guard")
    End Sub

#End Region

#Region "CUSTOM KERNEL"
    Private Function checkEngBuild() As Boolean

        Dim isAdbdRoot As Boolean = False

        Dim proc As String = Adb.RunAdbShellCommand(Device, False, "ps")
        Using r As New StringReader(proc)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If Not line = "" Then
                    Dim spl() As String = line.Split(" ")
                    Dim name As String = spl(spl.Length - 1)
                    Dim ty_pe As String = spl(0)

                    If name.Contains("/sbin/adbd") Then
                        If ty_pe.StartsWith("root") Then
                            isAdbdRoot = True
                        End If
                        Exit While
                    End If

                End If

            End While
        End Using

        If isAdbdRoot Then

            If checkEngMountSys() Then
                If checkEngMountSbin() Then
                    isAdbdRoot = True
                Else
                    RepairmountPointEngBuild()
                    If checkEngMountSbin() Then
                        isAdbdRoot = True
                    Else
                        isAdbdRoot = False
                    End If
                End If
            Else
                RepairmountPointEngBuild()
                If checkEngMountSys() Then
                    If checkEngMountSbin() Then
                        isAdbdRoot = True
                    Else
                        isAdbdRoot = False
                    End If
                Else
                    isAdbdRoot = False
                End If

            End If

        End If

        Return isAdbdRoot
    End Function
    Private Function checkEngMountSys() As Boolean

        Dim result As Boolean = False

        Adb.RunAdbShellCommandNoReturn(Device, False, "mount -o remount,rw /system /system")

        Dim mountable As String = Adb.RunAdbShellCommand(Device, False, "mount")

        Using r As New StringReader(mountable)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.Contains(" /system ") And line.Contains(" rw,") Then
                    result = True
                    Exit While
                End If
            End While
        End Using

        Return result

    End Function
    Private Function checkEngMountSbin() As Boolean

        Dim result As Boolean = False

        Dim mountSys As String = Adb.RunAdbShellCommand(Device, False, "mount -o remount,rw / /")
        If mountSys = "" Then
            result = True
        End If

        Return result

    End Function
    Private Sub RepairmountPointEngBuild()
        Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox killall e2fsck_guard")
    End Sub

#End Region

#Region "CUSTOM BINARY"
    Private Function checkCustomBinary() As Boolean

        Dim result As Boolean = False

        Dim bin As String = Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -al /system/bin")
        If checkIsCustomFile(bin) Then
            result = True
        End If

        If Not result Then
            Dim xbin As String = Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -al /system/xbin")
            If checkIsCustomFile(xbin) Then
                result = True
            End If
        End If

        Return result
    End Function
    Private Function checkIsCustomFile(FileList As String) As Boolean

        Dim result As Boolean = False

        Using r As New StringReader(FileList)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("-rw") Then
                    Dim splr() As String = line.Split(" "c)
                    Dim dFile As String = splr(splr.Length - 1)

                    If dFile.Contains(";") Then
                        dFile = dFile.Substring(dFile.IndexOf("m") + 1)
                        If dFile.Contains("[") Then dFile = dFile.Substring(0, dFile.IndexOf("[") - 1)
                    End If

                    If (dFile = ".xv" Or dFile = "adin" Or dFile = "uis" Or dFile = ".hulu" Or dFile = "daemonnis" Or dFile = ".adin" Or dFile = ".alpha" Or dFile = "alpha" Or dFile = ".suv" Or dFile = "ku.sud" Or dFile = "daemonsu") Then
                        'If (dFile = ".xv" Or dFile = "adin" Or dFile = "uis" Or dFile = ".hulu" Or dFile = "daemonnis" Or dFile = "alpha" Or dFile = ".suv" Or dFile = "ku.sud" Or dFile = "daemonsu") Then
                        '// Check Root
                        Dim customFile As Boolean = checkIsCustom(dFile)
                        '// ismount
                        If customFile Then
                            Dim customMount As Boolean = checkCustomMount(dFile)
                            If customMount Then
                                result = True
                                CustomName = dFile
                            End If
                        End If

                    End If

                End If

            End While
        End Using

        Return result
    End Function
    Private Function checkIsCustom(cfile As String) As Boolean

        Dim tmpStr As String = RunAdbShellCustomBinary(Device, cfile, True, "echo Hello Kitty")

        If tmpStr = "Hello Kitty" Then
            Return True
        Else
            Return False
        End If

    End Function
    Private Function checkCustomMount(cFile As String) As Boolean

        Dim result As Boolean = False

        RunAdbShellCustomBinaryNoReturn(Device, cFile, True, "mount -o remount,rw /system /system")

        Dim mountable As String = RunAdbShellCustomBinary(Device, cFile, True, "mount")
        Using r As New StringReader(mountable)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine
                If line.Contains(" /system ") And line.Contains(" rw,") Then
                    result = True
                    Exit While
                End If
            End While
        End Using

        If result Then
            Dim mountSys As String = RunAdbShellCustomBinary(Device, cFile, True, "mount -o remount,rw / /")

            If mountSys = "" Then
                result = True
            Else
                result = False
            End If
        End If

        Return result
    End Function

#End Region

#End Region

#Region "GET SCANLIST"
    Private Sub collectFileLists()

        'get all files
        Dim intStor As String = getSdcardPath()
        Dim sdList As String = ""

        If Not (infoVersion.StartsWith("2") Or infoVersion.StartsWith("3")) Then
            If isRoot Then
                RawList = Adb.RunAdbShellCommand(Device, True, "ls -alR /system")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, True, "ls -alR /sbin")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, True, "ls -alR /data")
                sdList = Adb.RunAdbShellCommand(Device, True, "ls -alR " & intStor)
            ElseIf isCustom Then
                RawList = RunAdbShellCustomBinary(Device, CustomName, True, "ls -alR /system")
                RawList += vbNewLine & RunAdbShellCustomBinary(Device, CustomName, True, "ls -alR /sbin")
                RawList += vbNewLine & RunAdbShellCustomBinary(Device, CustomName, True, "ls -alR /data")
                sdList = RunAdbShellCustomBinary(Device, CustomName, True, "ls -alR " & intStor)
            ElseIf isInsecure Then
                RawList = Adb.RunAdbShellCommand(Device, False, "ls -alR /system")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /sbin")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /data")
                sdList = Adb.RunAdbShellCommand(Device, False, "ls -alR " & intStor)
            Else
                RawList = Adb.RunAdbShellCommand(Device, False, "ls -alR /system/app")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /system/priv-app")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /system/bin")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /system/xbin")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /system/lib")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /system/etc")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /system/usr")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR /system/vendor")
                sdList = vbNewLine & Adb.RunAdbShellCommand(Device, False, "ls -alR " & intStor)
            End If

            infoString = "Calculating files"
            Dim NonRootApk As String = ""

            calculateFiles(RawList & vbNewLine & sdList)

            If Not (isRoot Or isInsecure Or isCustom) Then
                NonRootApk = Adb.RunAdbShellCommand(Device, False, "pm list packages -3 -f")
                calculateApkNonRoot(NonRootApk)
            End If

            infoString = "Gathering files information"
            ScanList = collectingFiles(RawList & vbNewLine & sdList)

            infoString = "Filtering files information"
            'FilterList = filteringFiles(RawList)

            If Not (isRoot Or isInsecure Or isCustom) Then
                ScanList += vbNewLine & getNonRootAPK(NonRootApk)
                '   FilterList += vbNewLine & getNonRootAPK(NonRootApk)
            End If

        Else

            If isRoot Then
                RawList = Adb.RunAdbShellCommand(Device, True, "/data/local/tmp/busybox ls -AleR /system")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, True, "/data/local/tmp/busybox ls -AleR /sbin")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, True, "/data/local/tmp/busybox ls -AleR /data")
                sdList = Adb.RunAdbShellCommand(Device, True, "/data/local/tmp/busybox ls -AleR " & intStor)
            ElseIf isCustom Then
                RawList = RunAdbShellCustomBinary(Device, CustomName, True, "/data/local/tmp/busybox ls -AleR /system")
                RawList += vbNewLine & RunAdbShellCustomBinary(Device, CustomName, True, "/data/local/tmp/busybox ls -AleR /sbin")
                RawList += vbNewLine & RunAdbShellCustomBinary(Device, CustomName, True, "/data/local/tmp/busybox ls -AleR /data")
                sdList = RunAdbShellCustomBinary(Device, CustomName, True, "/data/local/tmp/busybox ls -AleR " & intStor)
            ElseIf isInsecure Then
                RawList = Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /system")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /sbin")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /data")
                sdList = Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR " & intStor)
            Else
                RawList = Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /system/bin")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /system/xbin")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /system/lib")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /system/etc")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /system/usr")
                RawList += vbNewLine & Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR /system/vendor")
                sdList = vbNewLine & Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -AleR " & intStor)
            End If

            infoString = "Calculating files"
            Dim NonRootApk As String = ""

            If Not (isRoot Or isInsecure Or isCustom) Then
                NonRootApk = Adb.RunAdbShellCommand(Device, False, "pm list packages -f")
                calculateApkNonRoot(NonRootApk)
            End If

            infoString = "Gathering files information"
            ScanList = gatheringFiles(RawList & vbNewLine & sdList)

            If Not (isRoot Or isInsecure Or isCustom) Then
                ScanList += vbNewLine & getNonRootAPK(NonRootApk)
            End If

            'infoString = "Filtering Files Information"
            'FilterList = ScanList
            'TotalFilterThreat = TotalThreat

        End If

    End Sub
    Private Sub calculateFiles(filelist As String)
        Using r As New StringReader(filelist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("-rw") Then

                    Dim splr() As String = line.Split(" "c)
                    Dim dFile As String = splr(splr.Length - 1)

                    If dFile.Contains(";") Then
                        dFile = dFile.Substring(dFile.IndexOf("m") + 1)

                        If dFile.Contains("[") Then
                            dFile = dFile.Substring(0, dFile.IndexOf("[") - 1)
                        End If

                    End If

                    If dFile.EndsWith(".apk") Then
                        apkNo += 1
                    ElseIf dFile.EndsWith(".so") Then
                        libNo += 1
                    Else

                        If Not (dFile.EndsWith(".ttf") Or dFile.EndsWith(".mp3") Or dFile.EndsWith(".ogg") Or dFile.EndsWith(".txt") Or dFile.EndsWith(".log") Or dFile.EndsWith(".xml") Or dFile.EndsWith(".prop") Or dFile.EndsWith(".csv") Or dFile.EndsWith(".conf") Or dFile.EndsWith(".0") Or dFile.EndsWith(".txt.gz") Or dFile.EndsWith(".jpg") Or dFile.EndsWith(".png") Or
                                dFile.EndsWith(".gif") Or dFile.EndsWith(".mp4") Or dFile.EndsWith(".odex") Or dFile.EndsWith(".html") Or dFile.EndsWith(".acdb") Or dFile.EndsWith(".cfg") Or dFile.EndsWith(".xz") Or dFile.EndsWith(".bc") Or dFile.EndsWith(".yac") Or dFile.EndsWith(".gz") Or dFile.EndsWith(".db") Or dFile.EndsWith(".fw") Or
                                dFile.EndsWith(".wav") Or dFile.EndsWith(".zip") Or dFile.EndsWith(".yvu420sp") Or dFile.EndsWith(".kic") Or dFile.EndsWith(".idc") Or dFile.EndsWith(".kcm") Or dFile.EndsWith(".kl") Or dFile.EndsWith(".bmd") Or dFile.EndsWith(".abnf") Or dFile.EndsWith(".config") Or dFile.EndsWith(".hcd") Or
                                dFile.EndsWith(".tlbin") Or dFile.EndsWith(".o") Or dFile.EndsWith(".a") Or dFile.EndsWith(".crt") Or dFile.EndsWith(".cer") Or dFile.EndsWith(".ini") Or dFile.EndsWith(".ctb") Or dFile.EndsWith(".emd") Or dFile.EndsWith(".jar") Or dFile.EndsWith(".mbn") Or dFile.EndsWith(".mdt") Or dFile.EndsWith(".krsh") Or
                                dFile.EndsWith(".iso") Or dFile.EndsWith(".pem") Or dFile.EndsWith(".flist") Or dFile.EndsWith(".accept") Or dFile.EndsWith(".deny") Or dFile.EndsWith(".css") Or dFile.EndsWith(".oat") Or dFile.EndsWith(".ko") Or dFile.EndsWith(".m4a") Or dFile.EndsWith(".dex") Or dFile.EndsWith(".par") Or
                                dFile.EndsWith(".ok") Or dFile.EndsWith(".data") Or dFile.EndsWith(".g2g") Or dFile.EndsWith(".lda") Or dFile.EndsWith(".jpeg") Or dFile.EndsWith(".dthumb") Or IsNumeric(dFile.Substring(dFile.Length - 1, 1))) Then

                            bryNo += 1
                        End If

                    End If

                End If
            End While
        End Using
    End Sub
    Private Sub calculateApkNonRoot(filelist As String)
        Using r As New StringReader(filelist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                apkNo += 1

            End While
        End Using
    End Sub

    Private Function AllDateAndTime(filelist As String) As String

        Dim result As String = ""
        Dim selectedDate As String = ""
        Dim index As Integer = 0

        Using r As New StringReader(filelist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                Dim temp As String = ""

                If line.StartsWith("-rw") Then

                    Dim spl() As String = line.Split(" "c)

                    Dim ddate As String = ""
                    If spl(spl.Length - 1).Contains(":") Then
                        ddate = spl(spl.Length - 2) & " " & spl(spl.Length - 1)
                    ElseIf spl(spl.Length - 2).Contains(":") Then
                        ddate = spl(spl.Length - 3) & " " & spl(spl.Length - 2)
                    ElseIf spl(spl.Length - 3).Contains(":") Then
                        ddate = spl(spl.Length - 4) & " " & spl(spl.Length - 3)
                    ElseIf spl(spl.Length - 4).Contains(":") Then
                        ddate = spl(spl.Length - 5) & " " & spl(spl.Length - 4)
                    ElseIf spl(spl.Length - 5).Contains(":") Then
                        ddate = spl(spl.Length - 6) & " " & spl(spl.Length - 5)
                    End If

                    If result = "" Then
                        result = ddate
                    Else
                        If Not searchSameDate(result, ddate) Then
                            result += vbNewLine & ddate
                        End If
                    End If

                End If

            End While

        End Using

        Using r As New StringReader(result)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                index = 0

                Using s As New StringReader(RawList)
                    Dim linc As String

                    While Not s.Peek = -1
                        linc = s.ReadLine

                        If linc.StartsWith("-rw") Then

                            Dim spl() As String = linc.Split(" "c)

                            Dim ddate As String = ""
                            If spl(spl.Length - 1).Contains(":") Then
                                ddate = spl(spl.Length - 2) & " " & spl(spl.Length - 1)
                            ElseIf spl(spl.Length - 2).Contains(":") Then
                                ddate = spl(spl.Length - 3) & " " & spl(spl.Length - 2)
                            ElseIf spl(spl.Length - 3).Contains(":") Then
                                ddate = spl(spl.Length - 4) & " " & spl(spl.Length - 3)
                            ElseIf spl(spl.Length - 4).Contains(":") Then
                                ddate = spl(spl.Length - 5) & " " & spl(spl.Length - 4)
                            ElseIf spl(spl.Length - 5).Contains(":") Then
                                ddate = spl(spl.Length - 6) & " " & spl(spl.Length - 5)
                            End If

                            If line = ddate Then
                                index += 1
                            End If

                        End If

                    End While
                End Using

                If index < 150 Then
                    If selectedDate = "" Then
                        selectedDate = line
                    Else
                        selectedDate += vbNewLine & line
                    End If
                End If

            End While
        End Using

        Return selectedDate
    End Function
    Private Function searchSameDate(filelist As String, searchDate As String) As Boolean

        Dim result As Boolean = False

        Using r As New StringReader(filelist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.Contains(searchDate) Then
                    result = True
                End If

            End While

        End Using

        Return result
    End Function

    Private Function collectingFiles(filelist As String) As String

        Dim result As String = ""
        Dim path As String = ""

        Using r As New StringReader(filelist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("/") Then
                    path = line.Replace(":", "/")
                    If path.Contains("//") Then path.Replace("//", "/")
                ElseIf line.StartsWith("-rw") Then

                    If Not (path.StartsWith("/data/tombstones") Or path.StartsWith("/data/time") Or path.StartsWith("/data/system") Or path.StartsWith("/data/resource-cache") Or path.StartsWith("/data/property") Or
                            path.StartsWith("/data/nfc") Or path.StartsWith("/data/misc") Or path.StartsWith("/data/media") Or path.StartsWith("/data/scd") Or path.StartsWith("/data/local/tmp") Or path.StartsWith("/data/etc") Or
                            path.StartsWith("/data/drm") Or path.StartsWith("/data/data-lib") Or path.StartsWith("/data/data") Or path.StartsWith("/data/dalvik-cache") Or path.StartsWith("/data/credmgr") Or path.StartsWith("/data/backup") Or
                            path.StartsWith("/data/nvram") Or path.StartsWith("/data/sec") Or path.StartsWith("/system/media") Or path.StartsWith("/system/fonts")) Then
                        Dim splr() As String = line.Split(" "c)
                        Dim dFile As String = splr(splr.Length - 1)

                        If (path.StartsWith("/storage") Or path.StartsWith("/mnt")) And Not (dFile.EndsWith(".apk") Or dFile.EndsWith(".so")) Then Continue While
                        If Not (dFile.EndsWith(".ttf") Or dFile.EndsWith(".mp3") Or dFile.EndsWith(".ogg") Or dFile.EndsWith(".txt") Or dFile.EndsWith(".log") Or dFile.EndsWith(".xml") Or dFile.EndsWith(".prop") Or dFile.EndsWith(".csv") Or dFile.EndsWith(".conf") Or dFile.EndsWith(".0") Or dFile.EndsWith(".txt.gz") Or dFile.EndsWith(".jpg") Or dFile.EndsWith(".png") Or
                                dFile.EndsWith(".gif") Or dFile.EndsWith(".mp4") Or dFile.EndsWith(".odex") Or dFile.EndsWith(".html") Or dFile.EndsWith(".acdb") Or dFile.EndsWith(".cfg") Or dFile.EndsWith(".xz") Or dFile.EndsWith(".bc") Or dFile.EndsWith(".yac") Or dFile.EndsWith(".gz") Or dFile.EndsWith(".db") Or dFile.EndsWith(".fw") Or
                                dFile.EndsWith(".wav") Or dFile.EndsWith(".zip") Or dFile.EndsWith(".yvu420sp") Or dFile.EndsWith(".kic") Or dFile.EndsWith(".idc") Or dFile.EndsWith(".kcm") Or dFile.EndsWith(".kl") Or dFile.EndsWith(".bmd") Or dFile.EndsWith(".abnf") Or dFile.EndsWith(".config") Or dFile.EndsWith(".hcd") Or
                                dFile.EndsWith(".tlbin") Or dFile.EndsWith(".o") Or dFile.EndsWith(".a") Or dFile.EndsWith(".crt") Or dFile.EndsWith(".cer") Or dFile.EndsWith(".ini") Or dFile.EndsWith(".ctb") Or dFile.EndsWith(".emd") Or dFile.EndsWith(".jar") Or dFile.EndsWith(".mbn") Or dFile.EndsWith(".mdt") Or dFile.EndsWith(".krsh") Or
                                dFile.EndsWith(".iso") Or dFile.EndsWith(".pem") Or dFile.EndsWith(".flist") Or dFile.EndsWith(".accept") Or dFile.EndsWith(".deny") Or dFile.EndsWith(".css") Or dFile.EndsWith(".oat") Or dFile.EndsWith(".ko") Or dFile.EndsWith(".m4a") Or dFile.EndsWith(".dex") Or dFile.EndsWith(".par") Or
                                dFile.EndsWith(".ok") Or dFile.EndsWith(".data") Or dFile.EndsWith(".g2g") Or dFile.EndsWith(".lda") Or dFile.EndsWith(".jpeg") Or dFile.EndsWith(".dthumb") Or IsNumeric(dFile.Substring(dFile.Length - 1, 1))) Then

                            If result = "" Then
                                result = path & dFile
                            Else
                                result += vbNewLine & path & dFile
                            End If
                            TotalThreat += 1

                        End If

                    End If

                End If

            End While
        End Using

        Return result
    End Function
    Private Function gatheringFiles(filelist As String) As String

        Dim result As String = ""
        Dim path As String = ""

        Using r As New StringReader(filelist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("/") Then
                    path = line.Replace(":", "/")
                    If path.Contains("//") Then path.Replace("//", "/")

                ElseIf line.StartsWith("-rw") Then

                    If Not (path.StartsWith("/data/tombstones") Or path.StartsWith("/data/time") Or path.StartsWith("/data/system") Or path.StartsWith("/data/resource-cache") Or path.StartsWith("/data/property") Or
                            path.StartsWith("/data/nfc") Or path.StartsWith("/data/misc") Or path.StartsWith("/data/media") Or path.StartsWith("/data/scd") Or path.StartsWith("/data/local/tmp") Or path.StartsWith("/data/etc") Or
                            path.StartsWith("/data/drm") Or path.StartsWith("/data/data-lib") Or path.StartsWith("/data/data") Or path.StartsWith("/data/dalvik-cache") Or path.StartsWith("/data/credmgr") Or path.StartsWith("/data/backup") Or
                            path.StartsWith("/data/nvram") Or path.StartsWith("/data/sec") Or path.StartsWith("/system/media") Or path.StartsWith("/system/fonts")) Then

                        Dim splr() As String = line.Split(" "c)
                        Dim dFile As String = splr(splr.Length - 1)

                        If dFile.Contains(";") Then
                            dFile = dFile.Substring(dFile.IndexOf("m") + 1)
                            If dFile.Contains("[") Then
                                dFile = dFile.Substring(0, dFile.IndexOf("[") - 1)
                            End If
                        End If

                        If (path.StartsWith("/storage") Or path.StartsWith("/mnt")) And Not dFile.EndsWith(".apk") Then Continue While

                        If Not (dFile.EndsWith(".ttf") Or dFile.EndsWith(".mp3") Or dFile.EndsWith(".ogg") Or dFile.EndsWith(".txt") Or dFile.EndsWith(".log") Or dFile.EndsWith(".xml") Or dFile.EndsWith(".prop") Or dFile.EndsWith(".csv") Or dFile.EndsWith(".conf") Or dFile.EndsWith(".0") Or dFile.EndsWith(".txt.gz") Or dFile.EndsWith(".jpg") Or dFile.EndsWith(".png") Or
                                dFile.EndsWith(".gif") Or dFile.EndsWith(".mp4") Or dFile.EndsWith(".odex") Or dFile.EndsWith(".html") Or dFile.EndsWith(".acdb") Or dFile.EndsWith(".cfg") Or dFile.EndsWith(".xz") Or dFile.EndsWith(".bc") Or dFile.EndsWith(".yac") Or dFile.EndsWith(".gz") Or dFile.EndsWith(".db") Or dFile.EndsWith(".fw") Or
                                dFile.EndsWith(".wav") Or dFile.EndsWith(".zip") Or dFile.EndsWith(".yvu420sp") Or dFile.EndsWith(".kic") Or dFile.EndsWith(".idc") Or dFile.EndsWith(".kcm") Or dFile.EndsWith(".kl") Or dFile.EndsWith(".bmd") Or dFile.EndsWith(".abnf") Or dFile.EndsWith(".config") Or dFile.EndsWith(".hcd") Or
                                dFile.EndsWith(".tlbin") Or dFile.EndsWith(".o") Or dFile.EndsWith(".a") Or dFile.EndsWith(".crt") Or dFile.EndsWith(".cer") Or dFile.EndsWith(".ini") Or dFile.EndsWith(".ctb") Or dFile.EndsWith(".emd") Or dFile.EndsWith(".jar") Or dFile.EndsWith(".mbn") Or dFile.EndsWith(".mdt") Or dFile.EndsWith(".krsh") Or
                                dFile.EndsWith(".iso") Or dFile.EndsWith(".pem") Or dFile.EndsWith(".flist") Or dFile.EndsWith(".accept") Or dFile.EndsWith(".deny") Or dFile.EndsWith(".css") Or dFile.EndsWith(".oat") Or dFile.EndsWith(".ko") Or dFile.EndsWith(".m4a") Or dFile.EndsWith(".dex") Or dFile.EndsWith(".par") Or
                                dFile.EndsWith(".ok") Or dFile.EndsWith(".data") Or dFile.EndsWith(".g2g") Or dFile.EndsWith(".lda") Or dFile.EndsWith(".jpeg") Or dFile.EndsWith(".dthumb") Or dFile.EndsWith(".ldb") Or dFile.EndsWith(".kdb") Or IsNumeric(dFile.Substring(dFile.Length - 1, 1))) Then

                            If result = "" Then
                                result = path & dFile
                            Else
                                result += vbNewLine & path & dFile
                            End If

                            TotalThreat += 1

                            If dFile.EndsWith(".apk") Then
                                apkNo += 1
                            ElseIf dFile.EndsWith(".so") Then
                                libNo += 1
                            Else
                                bryNo += 1
                            End If

                        End If

                    End If

                End If

            End While
        End Using

        Return result
    End Function

    Private Function filteringFiles(filelist As String) As String

        Dim result As String = ""
        Dim path As String = ""
        Dim searchDate As String = AllDateAndTime(RawList)

        Using r As New StringReader(filelist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("/") Then
                    path = line.Replace(":", "/")
                    If path.Contains("//") Then path = path.Replace("//", "/")
                ElseIf line.StartsWith("-rw") Then

                    If Not (path.StartsWith("/data/tombstones") Or path.StartsWith("/data/time") Or path.StartsWith("/data/system") Or path.StartsWith("/data/resource-cache") Or path.StartsWith("/data/property") Or
                            path.StartsWith("/data/nfc") Or path.StartsWith("/data/misc") Or path.StartsWith("/data/media") Or path.StartsWith("/data/scd") Or path.StartsWith("/data/local/tmp") Or path.StartsWith("/data/etc") Or
                            path.StartsWith("/data/drm") Or path.StartsWith("/data/data-lib") Or path.StartsWith("/data/data") Or path.StartsWith("/data/dalvik-cache") Or path.StartsWith("/data/credmgr") Or path.StartsWith("/data/backup") Or
                            path.StartsWith("/data/nvram") Or path.StartsWith("/data/sec") Or path.StartsWith("/system/media") Or path.StartsWith("/system/fonts")) Then

                        If searchIsValidDate(searchDate, line) Then

                            Dim splr() As String = line.Split(" "c)
                            Dim dFile As String = splr(splr.Length - 1)


                            If (path.StartsWith("/storage") Or path.StartsWith("/mnt")) And Not dFile.EndsWith(".apk") Then Continue While
                            If Not (dFile.EndsWith(".ttf") Or dFile.EndsWith(".mp3") Or dFile.EndsWith(".ogg") Or dFile.EndsWith(".txt") Or dFile.EndsWith(".log") Or dFile.EndsWith(".xml") Or dFile.EndsWith(".prop") Or dFile.EndsWith(".csv") Or dFile.EndsWith(".conf") Or dFile.EndsWith(".0") Or dFile.EndsWith(".txt.gz") Or dFile.EndsWith(".jpg") Or dFile.EndsWith(".png") Or
                                dFile.EndsWith(".gif") Or dFile.EndsWith(".mp4") Or dFile.EndsWith(".odex") Or dFile.EndsWith(".html") Or dFile.EndsWith(".acdb") Or dFile.EndsWith(".cfg") Or dFile.EndsWith(".xz") Or dFile.EndsWith(".bc") Or dFile.EndsWith(".yac") Or dFile.EndsWith(".gz") Or dFile.EndsWith(".db") Or dFile.EndsWith(".fw") Or
                                dFile.EndsWith(".wav") Or dFile.EndsWith(".zip") Or dFile.EndsWith(".yvu420sp") Or dFile.EndsWith(".kic") Or dFile.EndsWith(".idc") Or dFile.EndsWith(".kcm") Or dFile.EndsWith(".kl") Or dFile.EndsWith(".bmd") Or dFile.EndsWith(".abnf") Or dFile.EndsWith(".config") Or dFile.EndsWith(".hcd") Or
                                dFile.EndsWith(".tlbin") Or dFile.EndsWith(".o") Or dFile.EndsWith(".a") Or dFile.EndsWith(".crt") Or dFile.EndsWith(".cer") Or dFile.EndsWith(".ini") Or dFile.EndsWith(".ctb") Or dFile.EndsWith(".emd") Or dFile.EndsWith(".jar") Or dFile.EndsWith(".mbn") Or dFile.EndsWith(".mdt") Or dFile.EndsWith(".krsh") Or
                                dFile.EndsWith(".iso") Or dFile.EndsWith(".pem") Or dFile.EndsWith(".flist") Or dFile.EndsWith(".accept") Or dFile.EndsWith(".deny") Or dFile.EndsWith(".css") Or dFile.EndsWith(".oat") Or dFile.EndsWith(".ko") Or dFile.EndsWith(".m4a") Or dFile.EndsWith(".dex") Or dFile.EndsWith(".par") Or
                                dFile.EndsWith(".ok") Or dFile.EndsWith(".data") Or dFile.EndsWith(".g2g") Or dFile.EndsWith(".lda") Or dFile.EndsWith(".jpeg") Or dFile.EndsWith(".dthumb") Or IsNumeric(dFile.Substring(dFile.Length - 1, 1))) Then

                                If result = "" Then
                                    result = path & dFile
                                Else
                                    result += vbNewLine & path & dFile
                                End If

                                TotalFilterThreat += 1

                            End If

                        End If

                    End If

                End If

            End While

        End Using

        Return result
    End Function
    Private Function searchIsValidDate(list As String, searchFile As String) As Boolean

        Dim result As Boolean = False
        Using r As New StringReader(list)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                Dim spl() As String = searchFile.Split(" "c)

                Dim ddate As String = ""
                If spl(spl.Length - 1).Contains(":") Then
                    ddate = spl(spl.Length - 2) & " " & spl(spl.Length - 1)
                ElseIf spl(spl.Length - 2).Contains(":") Then
                    ddate = spl(spl.Length - 3) & " " & spl(spl.Length - 2)
                ElseIf spl(spl.Length - 3).Contains(":") Then
                    ddate = spl(spl.Length - 4) & " " & spl(spl.Length - 3)
                ElseIf spl(spl.Length - 4).Contains(":") Then
                    ddate = spl(spl.Length - 5) & " " & spl(spl.Length - 4)
                ElseIf spl(spl.Length - 5).Contains(":") Then
                    ddate = spl(spl.Length - 6) & " " & spl(spl.Length - 5)
                End If

                If ddate = line Then
                    result = True
                    Exit While
                End If

            End While
        End Using

        Return result
    End Function
    Private Function getNonRootAPK(filelist As String) As String
        Dim result As String = ""

        Using r As New StringReader(filelist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("package:") Then

                    Dim tmp As String = line.Substring(8)
                    tmp = tmp.Substring(0, tmp.IndexOf("="))

                    If result = "" Then
                        result = tmp
                    Else
                        result += vbNewLine & tmp
                    End If

                    TotalThreat += 1
                    TotalFilterThreat += 1

                End If

            End While
        End Using

        Return result
    End Function
    Private Function getSdcardPath() As String

        Dim result As String = ""
        Dim list As String = Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox ls -ale /")

        Using r As New StringReader(list)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("lrw") Then
                    Dim splr() As String = line.Split(" "c)

                    Dim tmp As String = splr(splr.Length - 3)

                    If tmp.Contains(";") Then
                        tmp = tmp.Substring(tmp.IndexOf("m") + 1)
                        If tmp.Contains("[") Then
                            tmp = tmp.Substring(0, tmp.IndexOf("[") - 1)
                        End If
                    End If

                    If tmp = "sdcard" Then
                        result = splr(splr.Length - 1)
                        If result.Contains(";") Then
                            result = result.Substring(result.IndexOf("m") + 1)
                            If result.Contains("[") Then result = result.Substring(0, result.IndexOf("[") - 1)
                        End If
                    End If

                End If

            End While
        End Using

        Return result
    End Function

#End Region

    Private Sub resetInfoVariable()

        infoModel = ""
        infoProductName = ""
        infoVersion = ""
        infoRoot = ""
        infoArch = ""
        infoScan = ""

        apkNo = 0
        libNo = 0
        bryNo = 0

        TotalThreat = 0
        TotalFilterThreat = 0
        ScanList = ""
        FilterList = ""
        RawList = ""

        isRoot = False
        isInsecure = False
        isMount = False
        isCustom = False
        CustomName = ""

    End Sub

#End Region

#End Region

#Region "BUTTON CONTROL"

    Public bolReset As Boolean = False
    Public bolJunk As Boolean = False
    Public bolDalvik As Boolean = False

    Private allJunkFile As String
    Private totalJunkFileNo As Integer = 0
    Private currentJunkFilePath As String = ""
    Public isJunk As Boolean = False
    Public Sub ButtonControl()

        With Form1

            busyState()
            .butScan.ForeColor = Color.White
            .butScan.BorderColor = Color.White

            'Factory Reset
            If bolReset Then

                .Status.Text = "In progress"
                .Progress.Text = "Processing factory soft reset"

                Dim bwkReset As New BackgroundWorker
                AddHandler bwkReset.DoWork, New DoWorkEventHandler(AddressOf ProcFactoryReset)
                bwkReset.RunWorkerAsync()

                While bwkReset.IsBusy
                    Application.DoEvents()
                    Threading.Thread.Sleep(100)
                End While

                .Status.Text = "Waiting"
                .Progress.Text = "Factory soft reset after rebooting"
                bolReset = False

                'Clear Junk
            ElseIf bolJunk Then

                Dim currentJunkFileNo As Integer = 1

                .Status.Text = "In progress"
                .Progress.Text = "Clearing junk files"
                .lbItems.Text = "Item"
                .Log.Text = "Collecting junk files"
                .lbScan.Text = "Item cleared"
                .Info.Text = "Preparing to clear junk files"
                .Virus.Text = "Don't remove your device"
                .lbStatus.Text = "Warning"

                With .ProgBarPlus1
                    .Value = 0
                    .Visible = True
                    .CylonRun = True
                End With

                Dim bwkGetJunk As New BackgroundWorker
                AddHandler bwkGetJunk.DoWork, New DoWorkEventHandler(AddressOf getJunkFiles)
                bwkGetJunk.RunWorkerAsync()

                While bwkGetJunk.IsBusy
                    Application.DoEvents()
                    Threading.Thread.Sleep(100)
                End While

                Using r As New StringReader(allJunkFile)
                    Dim line As String

                    While Not r.Peek = -1
                        line = r.ReadLine

                        If Not line = "" Then

                            currentJunkFilePath = line

                            'log
                            .Log.ForeColor = Color.GreenYellow
                            .Log.Text = line

                            .Info.Text = currentJunkFileNo & " of " & totalJunkFileNo
                            .ProgBarPlus1.Value = CInt((currentJunkFileNo / totalJunkFileNo) * 100)

                            Dim bwkClearJunk As New BackgroundWorker
                            AddHandler bwkClearJunk.DoWork, New DoWorkEventHandler(AddressOf clearJunkFiles)
                            bwkClearJunk.RunWorkerAsync()

                            While bwkClearJunk.IsBusy
                                Application.DoEvents()
                            End While

                            currentJunkFileNo += 1
                        End If

                    End While

                End Using

                If Not autoMode Then
                    .lbItems.Text = "Process"
                    .Log.Text = ""
                    .lbScan.Text = "Information"
                    .Info.Text = ""
                    .Virus.Text = ""
                    .lbStatus.Text = "Status"
                    .ProgBarPlus1.Value = 0
                    .ProgBarPlus1.Visible = False
                    .Status.Text = "Ready"
                    .Progress.Text = "Ready to scan"

                    .butJunk.ForeColor = Color.GreenYellow
                    .butJunk.BorderColor = Color.GreenYellow
                    .butFactory.ForeColor = Color.GreenYellow
                    .butFactory.BorderColor = Color.GreenYellow
                    .butDalvik.ForeColor = Color.GreenYellow
                    .butDalvik.BorderColor = Color.GreenYellow
                    .butScan.ForeColor = Color.GreenYellow
                    .butScan.BorderColor = Color.GreenYellow

                    RebootDevice()

                End If

                totalJunkFileNo = 0
                allJunkFile = ""
                bolJunk = False

            ElseIf bolDalvik Then

                Dim currentJunkFileNo As Integer = 1

                .Status.Text = "In progress"
                .Progress.Text = "Clearing dalvik-cache files"
                .lbItems.Text = "Item"
                .Log.Text = "Collecting dalvik-cache files"
                .lbScan.Text = "Item cleared"
                .Info.Text = "Preparing to clear dalvik-cache files"
                .Virus.Text = "Don't remove your device"
                .lbStatus.Text = "Warning"

                With .ProgBarPlus1
                    .Value = 0
                    .Visible = True
                    .CylonRun = True
                End With

                Dim bwkGetDalvik As New BackgroundWorker
                AddHandler bwkGetDalvik.DoWork, New DoWorkEventHandler(AddressOf getDalvikFiles)
                bwkGetDalvik.RunWorkerAsync()

                While bwkGetDalvik.IsBusy
                    Application.DoEvents()
                    Threading.Thread.Sleep(100)
                End While

                Using r As New StringReader(allJunkFile)
                    Dim line As String

                    While Not r.Peek = -1
                        line = r.ReadLine

                        If Not line = "" Then

                            currentJunkFilePath = line

                            'log
                            .Log.ForeColor = Color.GreenYellow
                            .Log.Text = If(line.Length > 55, line.Substring(0, 53) & " ...", line)

                            .Info.Text = currentJunkFileNo & " of " & totalJunkFileNo
                            .ProgBarPlus1.Value = CInt((currentJunkFileNo / totalJunkFileNo) * 100)

                            Dim bwkClearDalvik As New BackgroundWorker
                            AddHandler bwkClearDalvik.DoWork, New DoWorkEventHandler(AddressOf clearDalvikFiles)
                            bwkClearDalvik.RunWorkerAsync()

                            While bwkClearDalvik.IsBusy
                                Application.DoEvents()
                            End While

                            currentJunkFileNo += 1
                        End If

                    End While

                End Using

                If Not autoMode Then
                    .lbItems.Text = "Process"
                    .Log.Text = ""
                    .lbScan.Text = "Information"
                    .Info.Text = ""
                    .Virus.Text = ""
                    .lbStatus.Text = "Status"
                    .ProgBarPlus1.Value = 0
                    .ProgBarPlus1.Visible = False
                    .Status.Text = "Ready"
                    .Progress.Text = "Ready to scan"

                    .butJunk.ForeColor = Color.GreenYellow
                    .butJunk.BorderColor = Color.GreenYellow
                    .butFactory.ForeColor = Color.GreenYellow
                    .butFactory.BorderColor = Color.GreenYellow
                    .butDalvik.ForeColor = Color.GreenYellow
                    .butDalvik.BorderColor = Color.GreenYellow
                    .butScan.ForeColor = Color.GreenYellow
                    .butScan.BorderColor = Color.GreenYellow

                    RebootDevice()

                End If

                totalJunkFileNo = 0
                allJunkFile = ""
                bolDalvik = False

            End If
        End With

    End Sub
    Private Sub ProcFactoryReset()
        Try
            If isRoot Then
                Adb.RunAdbShellCommandNoReturn(Device, True, "am broadcast -a android.intent.action.MASTER_CLEAR")
            ElseIf isCustom Then
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "am broadcast -a android.intent.action.MASTER_CLEAR")
            Else
                Adb.RunAdbShellCommandNoReturn(Device, False, "am broadcast -a android.intent.action.MASTER_CLEAR")
            End If
        Catch ex As Exception

        End Try
    End Sub
    Private Sub getJunkFiles()

        If isRoot Then
            allJunkFile = Adb.RunAdbShellCommand(Device, True, "ls /data/data")
        ElseIf isCustom Then
            allJunkFile = RunAdbShellCustomBinary(Device, CustomName, True, "ls /data/data")
        ElseIf isInsecure Then
            allJunkFile = Adb.RunAdbShellCommand(Device, False, "ls /data/data")
        End If

        Using r As New StringReader(allJunkFile)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If Not line = "" Then
                    totalJunkFileNo += 1
                End If

            End While

        End Using

    End Sub
    Private Sub clearJunkFiles()

        Try

            If isRoot Then
                Adb.RunAdbShellCommandNoReturn(Device, True, "rm -r /data/data/" & currentJunkFilePath & "/cache/")
            ElseIf isCustom Then
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r /data/data/" & currentJunkFilePath & "/cache/")
            ElseIf isInsecure Then
                Adb.RunAdbShellCommandNoReturn(Device, False, "rm -r /data/data/" & currentJunkFilePath & "/cache/")
            End If

        Catch ex As Exception

        End Try

    End Sub
    Private Sub clearDalvikFiles()
        Try

            If isRoot Then
                Adb.RunAdbShellCommandNoReturn(Device, True, "rm -r /data/dalvik-cache/" & currentJunkFilePath)
            ElseIf isCustom Then
                RunAdbShellCustomBinary(Device, CustomName, True, "rm -r /data/dalvik-cache/" & currentJunkFilePath)
            ElseIf isInsecure Then
                Adb.RunAdbShellCommandNoReturn(Device, False, "rm -r /data/dalvik-cache/" & currentJunkFilePath)
            End If

        Catch ex As Exception

        End Try
    End Sub
    Private Sub getDalvikFiles()

        If isRoot Then
            allJunkFile = Adb.RunAdbShellCommand(Device, True, "ls /data/dalvik-cache")
        ElseIf isCustom Then
            allJunkFile = RunAdbShellCustomBinary(Device, CustomName, True, "ls /data/dalvik-cache")
        ElseIf isInsecure Then
            allJunkFile = Adb.RunAdbShellCommand(Device, False, "ls /data/dalvik-cache")
        End If

        Using r As New StringReader(allJunkFile)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If Not line = "" Then
                    totalJunkFileNo += 1
                End If

            End While
        End Using

    End Sub
    Private Sub resetJunkVariable()

        totalJunkFileNo = 0
        bolReset = False
        bolJunk = False
        bolDalvik = False
        allJunkFile = ""

    End Sub
    Private Sub RebootDevice()
        Dim bwkReboot As New BackgroundWorker
        AddHandler bwkReboot.DoWork, New DoWorkEventHandler(AddressOf RebootDoWork)
        bwkReboot.RunWorkerAsync()

        While bwkReboot.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub RebootDoWork()
        Adb.RunAdbCommand(Device, "reboot")
    End Sub

#End Region

#Region "ADB"
    Private installDriver As Boolean = False
    Private Check As Boolean = False
    Public Sub checkAdbDriver()

        Try
            Check = False

            Dim bwkCheckDriver As New BackgroundWorker
            AddHandler bwkCheckDriver.DoWork, New DoWorkEventHandler(AddressOf checkDriverDoWork)
            bwkCheckDriver.RunWorkerAsync()

            While bwkCheckDriver.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

            If Check Then
                If Not installDriver Then
                    With Form1

                        installDriver = True
                        .Status.Text = "Busy"
                        .Progress.Text = "Need to install adb driver"

                        Process.Start("Resources\Installer.exe")
                        installDriver = True

                    End With
                End If
            End If

        Catch ex As Exception

        End Try
    End Sub
    Private Sub checkDriverDoWork()
        Dim pc As String = "."
        Dim wmi As Object = GetObject("winmgmts:\\" & pc & "\root\cimv2")
        Dim notWorking As String = ""
        Dim devices As Object = wmi.ExecQuery("Select * from " & "Win32_PnPEntity WHERE ConfigManagerErrorCode <> 0")
        For Each d As Object In devices
            notWorking = IIf(IsDBNull(d.Name), "N/A", d.Name)
            If notWorking.ToUpper.Contains("ADB") Or notWorking.ToUpper.Contains("ANDROID") Or notWorking.ToUpper.Contains("MTP") Or notWorking.ToUpper.Contains("D2502") Then
                Check = True
                Exit For
            End If
        Next
    End Sub
    Public Sub AdbKiller()

        Try

            For Each q As Process In Process.GetProcesses
                If q.ToString.ToUpper.Contains("SHUAME") Or q.ToString.ToUpper.Contains("MZW") Or q.ToString.ToUpper.Contains("HISUITE") Or
                  q.ToString.ToUpper.Contains("FILETRANSFER") Or q.ToString.ToUpper.Contains("MOBILEGO") Or q.ToString.ToUpper.Contains("MOBOROBO") Or
                  q.ToString.ToUpper.Contains("ROMASTER") Or q.ToString.ToUpper.Contains("WSHELPER") Or q.ToString.ToUpper.Contains("SRS-") Or
                  q.ToString.ToUpper.Contains("RESCUE") Or q.ToString.ToUpper.Contains("UNLOCKTOOL") Or q.ToString.ToUpper.Contains("ROOT") Or
                  q.ToString.ToUpper.Contains("KIES") Or q.ToString.ToUpper.Contains("MIPHONE") Or q.ToString.ToUpper.Contains("ANDROIDINTERFACE") Or
                  q.ToString.ToUpper.Contains("ADB") Then
                    q.Kill()
                End If
            Next

        Catch ex As Exception

        End Try

    End Sub

#End Region

#Region "CUSTOM ADB COMMAND"
    Public Function RunAdbShellCustomBinary(dev As Device, binary As String, rootShell As Boolean, cmd As String, ParamArray args() As String) As String

        Dim shellCommand As String = "shell "
        If rootShell Then
            shellCommand += binary & " -c """
        Else
            shellCommand += binary & " "
        End If

        shellCommand += cmd

        For i As Integer = 0 To args.Length - 1
            shellCommand += " " + args(i)
        Next

        If rootShell Then shellCommand += """"

        Return Adb.RunAdbCommand(dev, shellCommand)
    End Function
    Public Sub RunAdbShellCustomBinaryNoReturn(dev As Device, binary As String, rootShell As Boolean, cmd As String, ParamArray args() As String)

        Dim shellCommand As String = "shell "
        If rootShell Then
            shellCommand += binary & " -c """
        End If

        shellCommand += cmd

        For i As Integer = 0 To args.Length - 1
            shellCommand += " " + args(i)
        Next

        If rootShell Then shellCommand += """"

        Adb.RunAdbCommandNoReturn(dev, shellCommand)
    End Sub
    Public Function RunAdbShellCustomBinaryWithTimeout(dev As Device, binary As String, rootShell As Boolean, cmd As String, timeout As Integer, ParamArray args() As String) As String

        Dim shellCommand As String = "shell "
        If rootShell Then
            shellCommand += binary & " -c """
        End If

        shellCommand += cmd

        For i As Integer = 0 To args.Length - 1
            shellCommand += " " + args(i)
        Next

        If rootShell Then shellCommand += """"


        Return (Adb.ExecuteAdbCommand(Adb.FormAdbCommand(dev, shellCommand).WithTimeout(timeout)))
    End Function

#End Region

End Module
