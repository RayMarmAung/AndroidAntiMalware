Imports System.IO
Imports System.Text
Imports System.Security.Cryptography
Imports System.Management
Imports Telecom.Android
Imports Microsoft.Win32
Module Unique

#Region "GET UNIQUE ID"

    Private boardManufacturer As String = ""
    Private boardProduct As String = ""
    Private boardSerialNumber As String = ""
    Private biosManufacturer As String = ""
    Private biosReleaseDate As String = ""
    Private biosSerialNumber As String = ""
    Private cpuCaption As String = ""
    Private cpuManufacturer As String = ""
    Private cpuName As String = ""
    Private cpuId As String = ""
    Private cpuRevision As String = ""
    Private Function SystemInfo() As String

        'base_board
        Dim bbSearcher As New ManagementObjectSearcher("root\CIMV2", "SELECT * FROM Win32_Baseboard")
        For Each queryBB As ManagementObject In bbSearcher.Get
            boardManufacturer = queryBB("Manufacturer")
            boardProduct = queryBB("Product")
            boardSerialNumber = queryBB("SerialNumber")
        Next

        'bios
        Dim biosSearcher As New ManagementObjectSearcher("root\CIMV2", "SELECT * FROM Win32_BIOS")
        For Each queryBIOS As ManagementObject In biosSearcher.Get
            biosManufacturer = queryBIOS("Manufacturer")
            biosReleaseDate = queryBIOS("ReleaseDate")
            biosSerialNumber = queryBIOS("SerialNumber")
        Next

        'processor
        Dim cpuSearcher As New ManagementObjectSearcher("root\CIMV2", "SELECT * FROM Win32_Processor")
        For Each queryCPU As ManagementObject In cpuSearcher.Get
            cpuCaption = queryCPU("Caption")
            cpuManufacturer = queryCPU("Manufacturer")
            cpuName = queryCPU("Name")
            cpuId = queryCPU("ProcessorId")
            cpuRevision = queryCPU("Revision")
        Next

        Return boardManufacturer + boardProduct + boardSerialNumber + biosManufacturer + biosReleaseDate +
               biosSerialNumber + cpuCaption + cpuManufacturer + cpuName + cpuId + cpuRevision

    End Function
    Public Function generateSerialNumber() As String

        Dim uniqueNo As String = SystemInfo()
        uniqueNo = HashString(HashString(HashString(uniqueNo, HashType.SHA1), HashType.SHA256), HashType.SHA384)

        TripleDes.Key = TruncateHash("TELEComTech", TripleDes.KeySize \ 8)
        TripleDes.IV = TruncateHash("AV77813", TripleDes.BlockSize \ 8)
        uniqueNo = EncryptData(uniqueNo).ToUpper.Replace("+", "").Replace("=", "").Replace("/", "").Replace("O", "0").Replace("I", "1").Replace("L", "1").Replace("B", "8").Replace("S", "5")

        Return uniqueNo.Substring(0, 1) & uniqueNo.Substring(uniqueNo.Length - 1) & uniqueNo.Substring(1, 1) & uniqueNo.Substring(uniqueNo.Length - 2, 1) & "-" &
            uniqueNo.Substring(2, 1) & uniqueNo.Substring(uniqueNo.Length - 3, 1) & uniqueNo.Substring(3, 1) & uniqueNo.Substring(uniqueNo.Length - 4, 1) & "-" &
            uniqueNo.Substring(4, 1) & uniqueNo.Substring(uniqueNo.Length - 5, 1) & uniqueNo.Substring(5, 1) & uniqueNo.Substring(uniqueNo.Length - 6, 1) & "-" &
            uniqueNo.Substring(6, 1) & uniqueNo.Substring(uniqueNo.Length - 7, 1) & uniqueNo.Substring(7, 1) & uniqueNo.Substring(uniqueNo.Length - 8, 1)

    End Function
    Public Sub writeKeyFile(key As String)

        If File.Exists("TELEComActLib.dll") Then File.Delete("TELEComActLib.dll")

        Dim text As String = EncodeInformation(key)

        text += vbNewLine & EncodeInformation(boardManufacturer)
        text += vbNewLine & EncodeInformation(boardProduct)
        text += vbNewLine & EncodeInformation(boardSerialNumber)
        text += vbNewLine & EncodeInformation(biosManufacturer)
        text += vbNewLine & EncodeInformation(biosReleaseDate)
        text += vbNewLine & EncodeInformation(biosSerialNumber)
        text += vbNewLine & EncodeInformation(cpuCaption)
        text += vbNewLine & EncodeInformation(cpuManufacturer)
        text += vbNewLine & EncodeInformation(cpuName)
        text += vbNewLine & EncodeInformation(cpuId)
        text += vbNewLine & EncodeInformation(cpuRevision)

        Using w As New StreamWriter("TempStr.bin")
            w.Write(text)
        End Using

        If File.Exists("TempStr.bin") Then
            Zip.Run7zCommand("a NoblePhoenix.TELECOM TempStr.bin -p" & ProductSerialNo)
            File.Delete("TempStr.bin")
        End If

        If File.Exists("NoblePhoenix.TELECOM") Then
            EncryptOrDecryptFile("NoblePhoenix.TELECOM", "TELEComActLib.dll", CryptoFileAction.ActionEncrypt)
            File.Delete("NoblePhoenix.TELECOM")
        End If

    End Sub
    Public Function checkActivationStatus() As Boolean

        Dim result As Boolean = False

        If File.Exists("TELEComActLib.dll") Then

            'decrypted key file
            EncryptOrDecryptFile("TELEComActLib.dll", "NoblePhoenix.TELECOM", CryptoFileAction.ActionDecrypt)
            If File.Exists("NoblePhoenix.TELECOM") Then
                Zip.Run7zCommand("e NoblePhoenix.TELECOM TempStr.bin -p" & ProductSerialNo)
                File.Delete("NoblePhoenix.TELECOM")
            End If

            Dim tempString As String = ""

            If File.Exists("TempStr.bin") Then
                Using r As New StreamReader("TempStr.bin")
                    tempString = r.ReadToEnd
                    r.Close()
                End Using
                File.Delete("TempStr.bin")
            End If

            If checkRoutingTable(tempString, EncodeInformation(UndecryptKey(ProductSerialNo))) Then
                If checkRoutingTable(tempString, EncodeInformation(boardManufacturer)) Then
                    If checkRoutingTable(tempString, EncodeInformation(boardSerialNumber)) Then
                        If checkRoutingTable(tempString, EncodeInformation(biosManufacturer)) Then
                            If checkRoutingTable(tempString, EncodeInformation(biosReleaseDate)) Then
                                If checkRoutingTable(tempString, EncodeInformation(biosSerialNumber)) Then
                                    If checkRoutingTable(tempString, EncodeInformation(cpuCaption)) Then
                                        If checkRoutingTable(tempString, EncodeInformation(cpuManufacturer)) Then
                                            If checkRoutingTable(tempString, EncodeInformation(cpuName)) Then
                                                If checkRoutingTable(tempString, EncodeInformation(cpuId)) Then
                                                    If checkRoutingTable(tempString, EncodeInformation(cpuRevision)) Then
                                                        result = True
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

        End If

        Return result
    End Function
    Private Function UndecryptKey(key As String) As String

        Dim AAS As String = ""

        If key.Contains("-") Then
            AAS = key.Replace("-", "")
        End If

        Dim uniqueNo As String = HashString(HashString(HashString(HashString(HashString(AAS, HashType.MD5), HashType.SHA1), HashType.SHA256), HashType.SHA384), HashType.SHA512)

        TripleDes.Key = TruncateHash(AAS, TripleDes.KeySize \ 8)
        TripleDes.IV = TruncateHash(AAS, TripleDes.BlockSize \ 8)

        uniqueNo = EncryptData(uniqueNo).ToUpper.Replace("+", "").Replace("=", "").Replace("/", "").Replace("O", "0").Replace("I", "1").Replace("L", "1").Replace("B", "8").Replace("S", "5")

        Dim result As String = uniqueNo.Substring(0, 1) & uniqueNo.Substring(uniqueNo.Length - 1) & uniqueNo.Substring(1, 1) & uniqueNo.Substring(uniqueNo.Length - 2, 1) &
                                   uniqueNo.Substring(2, 1) & uniqueNo.Substring(uniqueNo.Length - 3, 1) & uniqueNo.Substring(3, 1) & uniqueNo.Substring(uniqueNo.Length - 4, 1) &
                                   uniqueNo.Substring(4, 1) & uniqueNo.Substring(uniqueNo.Length - 5, 1) & uniqueNo.Substring(5, 1) & uniqueNo.Substring(uniqueNo.Length - 6, 1) &
                                   uniqueNo.Substring(6, 1) & uniqueNo.Substring(uniqueNo.Length - 7, 1) & uniqueNo.Substring(7, 1) & uniqueNo.Substring(uniqueNo.Length - 8, 1)

        Return result
    End Function
    Private Function checkRoutingTable(hashlist As String, findstring As String) As Boolean

        Dim result As Boolean = False

        Using r As New StringReader(hashlist)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line = findstring Then
                    result = True
                End If

            End While
        End Using

        Return result
    End Function
    Private Function EncodeInformation(info As String) As String

        Dim uniqueNo As String = HashString(HashString(HashString(HashString(HashString(info, HashType.MD5), HashType.SHA1), HashType.SHA256), HashType.SHA384), HashType.SHA512)
        TripleDes.Key = TruncateHash(info, TripleDes.KeySize \ 8)
        TripleDes.IV = TruncateHash(info, TripleDes.BlockSize \ 8)

        Return EncryptData(uniqueNo).ToUpper

    End Function
    Public Function startTrialProcess() As Boolean

        Dim result As Boolean = False
        Dim trial As RegistryKey = Registry.CurrentUser.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\GsmActive", True)
        Dim check As RegistryKey = Registry.CurrentUser.OpenSubKey("Software\TELEComTech", True)

        If trial Is Nothing And check Is Nothing Then
            trial = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\GsmActive")
            check = Registry.CurrentUser.CreateSubKey("Software\\TELEComTech")

            trial.SetValue("AppID", encryptStringforTrial("3"))
            check.SetValue("Status", encryptStringforTrial(ProductSerialNo))
            result = True

        ElseIf trial Is Nothing Or check Is Nothing Then
            Return False
        Else

            Dim regTrial As String = trial.GetValue("AppID", "False")
            Dim regCheck As String = check.GetValue("Status", "False")

            If Not (regTrial = "False" Or regCheck = "False") Then

                If regCheck = encryptStringforTrial(ProductSerialNo) Then

                    For i As Integer = 3 To 0 Step -1
                        If regTrial = encryptStringforTrial(i) Then

                            result = True

                            If Not i = 0 Then
                                trial.SetValue("AppID", encryptStringforTrial(i - 1))
                            Else
                                Registry.CurrentUser.DeleteSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\GsmActive", False)
                            End If

                            Exit For

                        End If

                    Next

                Else
                    result = False
                End If
            Else
                result = False
            End If

        End If

        Return result
    End Function
    Private Function encryptStringforTrial(count As String) As String
        Return HashString(HashString(HashString(HashString(HashString(count, HashType.SHA512), HashType.SHA384), HashType.SHA256), HashType.SHA1), HashType.MD5)
    End Function
#End Region

    Private builder As New StringBuilder
    Public ProductSerialNo As String
    Public RegState As Boolean = False
    Public TrialState As Boolean = False
    Private Enum HashType
        MD5
        SHA1
        SHA256
        SHA384
        SHA512
    End Enum
    Private Function HashString(IN_STRING As String, algo As HashType)

        Dim inStringBytes As Byte() = Nothing
        Dim hashBytes As Byte() = Nothing

        inStringBytes = Encoding.ASCII.GetBytes(IN_STRING)

        Select Case algo
            Case HashType.MD5
                hashBytes = MD5.Create().ComputeHash(inStringBytes)
                Exit Select
            Case HashType.SHA1
                hashBytes = SHA1.Create().ComputeHash(inStringBytes)
                Exit Select
            Case HashType.SHA256
                hashBytes = SHA256.Create().ComputeHash(inStringBytes)
                Exit Select
            Case HashType.SHA384
                hashBytes = SHA384.Create().ComputeHash(inStringBytes)
                Exit Select
            Case HashType.SHA512
                hashBytes = SHA512.Create().ComputeHash(inStringBytes)
                Exit Select
        End Select

        Return MakeHashString(hashBytes)
    End Function
    Private Function MakeHashString(hash As Byte()) As String

        builder.Remove(0, builder.Length)

        For Each b As Byte In hash
            builder.Append(b.ToString("X2").ToUpper())
        Next

        Return builder.ToString()
    End Function

    Private TripleDes As New TripleDESCryptoServiceProvider
    Private Function TruncateHash(key As String, length As Integer) As Byte()

        Dim sha1 As New SHA1CryptoServiceProvider
        Dim KeyBytes() As Byte = Encoding.Unicode.GetBytes(key)
        Dim hash() As Byte = sha1.ComputeHash(KeyBytes)

        ReDim Preserve hash(length - 1)

        Return hash
    End Function
    Private Function EncryptData(str As String) As String
        Dim strBytes() As Byte = Encoding.Unicode.GetBytes(str)
        Dim ms As New MemoryStream
        Dim encStream As New CryptoStream(ms, TripleDes.CreateEncryptor(), CryptoStreamMode.Write)

        encStream.Write(strBytes, 0, strBytes.Length)
        encStream.FlushFinalBlock()

        Return Convert.ToBase64String(ms.ToArray)

    End Function

End Module
