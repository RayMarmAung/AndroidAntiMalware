Imports Telecom.Android
Imports System.ComponentModel
Imports System.IO

Module CleanVirus

#Region "BUTTON EVENTS"

    Public StopSignal As Boolean = False
    Private Sub StopProcess()
        With Form1

            If StopSignal Then

                .Progress.Text = "Stoping process"

                .tasks.Clear()
                .ProgBarPlus1.Value = 0
                .ProgBarPlus1.Visible = False
                .ObjectListView1.Items.Clear()
                .butScan.Text = "Scan"

                .Log.Text = ""
                .Info.Text = ""
                .Virus.Text = ""

                .lbItems.Text = "Process"
                .lbScan.Text = "Information"
                .lbStatus.Text = "Status"

                .butFactory.ForeColor = Color.GreenYellow
                .butJunk.ForeColor = Color.GreenYellow
                .butDalvik.ForeColor = Color.GreenYellow

                If isRoot Or isCustom Or isInsecure Then
                    .rdQuick.Enabled = True
                    .rdFull.Enabled = True
                    .lbQuick.ForeColor = Color.GreenYellow
                    .lbFull.ForeColor = Color.GreenYellow
                    .rdFull.Checked = True
                Else
                    .rdQuick.Enabled = True
                    .rdQuick.Checked = True
                    .lbQuick.ForeColor = Color.GreenYellow
                    .lbFull.ForeColor = Color.White
                End If

                .chkSus.Enabled = True
                .lblSus.ForeColor = Color.GreenYellow

                .Progress.Text = "Ready to scan"
                .Status.Text = "Ready"
                .ProgBarPlus1.Value = 0
                .ProgBarPlus1.Visible = False

                resetScanVariable()
                resetCleanVariable()
                StopSignal = False

            Else
                .tasks.Clear()
                .ProgBarPlus1.Value = 0
                .ProgBarPlus1.Visible = False
            End If

        End With
    End Sub
    Public Sub resetScanVariable()

        VirusNo = 0
        VirusList = ""

        currentPath = ""
        currentName = ""
        currentNo = 0

        ScanResult = False
        If Form1.tasks IsNot Nothing Then Form1.tasks.Clear()
        ReportChecksum = ""

    End Sub
    Public Sub resetCleanVariable()
        Stage = 1
        FiletoKill = ""
        mountCmd = ""
    End Sub

#End Region

#Region "SCAN"

    Private VirusNo As Integer
    Private VirusList As String = ""
    Private AndScanList As String = ""
    Public ReportChecksum As String = ""
    Public currentPath As String = ""
    Public currentName As String = ""
    Private currentNo As Integer = 0
    Public ImageStream As FileStream
    Private currentThreat As Integer = 0
    Private Function PrepareQuickScan(list As String) As String

        Dim result As String = ""
        Dim tempThreat As Integer = 0

        Using r As New StringReader(list)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.EndsWith(".apk") Then

                    If Not (line.StartsWith("/mnt") Or line.StartsWith("/storage") Or line.StartsWith("/sdcard")) Then
                        If result = "" Then
                            result = line
                        Else
                            result += vbNewLine & line
                        End If

                        tempThreat += 1
                    End If

                Else

                    If line.StartsWith("/system/bin") Or line.StartsWith("/system/xbin") Or line.StartsWith("/sbin") Or line.StartsWith("/system/etc") Then

                        If result = "" Then
                            result = line
                        Else
                            result += vbNewLine & line
                        End If

                        tempThreat += 1

                    End If

                End If

            End While
        End Using

        currentThreat = tempThreat

        Return result
    End Function
    Public Sub StartScan()

        busyState()

        With Form1

            .Log.ForeColor = Color.GreenYellow
            .Log.Text = "Initializing"

            .Info.ForeColor = Color.GreenYellow
            .Info.Text = "Preparing to scan"

            .Virus.ForeColor = Color.GreenYellow
            .Virus.Text = "No threat found"

            .Status.ForeColor = Color.White
            .Status.Text = "In progress"

            .Progress.ForeColor = Color.White
            .Progress.Text = "Scanning threats"

            If .rdQuick.Checked Then

                If .chkSus.Checked Then
                    AndScanList = PrepareQuickScan(FilterList)
                Else
                    AndScanList = PrepareQuickScan(ScanList)
                End If

            ElseIf .rdFull.Checked Then

                If .chkSus.Checked Then
                    AndScanList = FilterList
                    currentThreat = TotalFilterThreat
                Else
                    AndScanList = ScanList
                    currentThreat = TotalThreat
                End If

            End If

            .ProgBarPlus1.Visible = True
            .ProgBarPlus1.Value = 0
            .ProgBarPlus1.CylonRun = True

        End With

        ScanProcessStart()

    End Sub
    Private Sub HashFileLoad()

        If File.Exists("TELEComResLib.dll") Then

            EncryptOrDecryptFile("TELEComResLib.dll", "TmpStr.bin", CryptoFileAction.ActionDecrypt)

            If File.Exists("TmpStr.bin") Then

                Dim HashFile As String = ""
                Dim ByteFile As String = ""
                Dim zipCmd As String = Zip.Run7zCommand("l TmpStr.bin")
                Using r As New StringReader(zipCmd)
                    Dim line As String

                    While Not r.Peek = -1
                        line = r.ReadLine
                        Dim spl() As String = line.Split(" ")
                        Dim name As String = spl(spl.Length - 1)

                        If name.StartsWith("Hash_") And name.EndsWith(".TELECOM") Then
                            HashFile = name
                        ElseIf name.StartsWith("Byte_") And name.EndsWith(".TELECOM") Then
                            ByteFile = name
                        End If

                    End While
                End Using

                Zip.Run7zCommand("e TmpStr.bin " & HashFile & " -pTELEComTechAV77813&&*!#")
                Zip.Run7zCommand("e TmpStr.bin " & ByteFile & " -pTELEComTechAV77813&&*!#")

                Using r As New StreamReader(HashFile)
                    Checksum = r.ReadToEnd
                    r.Close()
                End Using

                Using r As New StreamReader(ByteFile)
                    StaticName = r.ReadToEnd
                    r.Close()
                End Using

                If File.Exists(HashFile) Then File.Delete(HashFile)
                If File.Exists(ByteFile) Then File.Delete(ByteFile)
            End If

            If File.Exists("TmpStr.bin") Then File.Delete("TmpStr.bin")

        End If

    End Sub
    Private Sub ScanProcessStart()

        Try

            With Form1

                currentNo = 1

                HashFileLoad()

                'Scanning
                .lbItems.Text = "Item"
                .lbScan.Text = "Items Scanned"
                .lbStatus.Text = "Status"

                VirusNo = 0
                Using r As New StringReader(AndScanList)
                    Dim line As String

                    While Not r.Peek = -1

                        'If device is disconnected
                        If State = "Disconnected" Or StopSignal Then
                            StopProcess()
                            Exit Sub
                        End If

                        line = r.ReadLine
                        currentPath = line

                        Dim spq() As String = line.Split("/")
                        currentName = spq(spq.Length - 1).Replace(" ", "")

                        'log
                        .Log.ForeColor = Color.GreenYellow
                        If currentPath.Length > 55 Then
                            .Log.Text = currentPath.Substring(0, 50) & " ..."
                        Else
                            .Log.Text = currentPath
                        End If

                        'info
                        .Info.Text = currentNo & " of " & currentThreat
                        .ProgBarPlus1.Value = Int((currentNo / currentThreat) * 100)

                        'Scanning Virus
                        ScanningVirus()

                        If isVirus Then

                            VirusNo += 1

                            'If virus, Add to list
                            If VirusList = "" Then
                                VirusList = currentPath
                            Else
                                VirusList += vbNewLine & currentPath
                            End If

                            With Form1

                                If currentPath.EndsWith(".apk") Then
                                    Dim info As New ApkInfo
                                    info.Start()
                                    .tasks.Add(New OTask(info.Icon, info.Name, info.Package, info.Status, info.Status, currentPath))
                                ElseIf currentPath.EndsWith(".so") Then
                                    .tasks.Add(New OTask("Libary", currentName.Replace(".so", ""), "Libary", "Idle", "Idle", currentPath))
                                Else
                                    Dim info As New ApkInfo
                                    info.getPackageStatus()
                                    .tasks.Add(New OTask("Script", currentName, "Binary", info.PackageStatus, info.PackageStatus, currentPath))
                                End If

                                .ObjectListView1.SetObjects(Form1.tasks)
                                .ObjectListView1.Items(.ObjectListView1.Items.Count - 1).EnsureVisible()

                            End With

                            'virus
                            If VirusNo = 0 Then
                                .Virus.ForeColor = Color.GreenYellow
                                .Virus.Text = "No threat found"
                            ElseIf VirusNo = 1 Then
                                .Virus.ForeColor = Color.Red
                                .Virus.Text = "1 threat found"
                            Else
                                .Virus.ForeColor = Color.Red
                                .Virus.Text = VirusNo & " threats found"
                            End If

                        End If

                        currentNo += 1

                        If File.Exists("Temp\" & currentName) Then File.Delete("Temp\" & currentName)

                    End While
                End Using

                'Finalize
                .Info.Text = currentThreat
                .ProgBarPlus1.Visible = False

                'generate log file
                ReportLogFile()

                If VirusList = "" Then
                    .lbItems.Text = "Information"
                    .Log.Text = "No virus detected"
                    .Status.Text = "Ready"
                    .lbStatus.Text = "Status"
                    .Virus.Text = "Scan process is completed"
                    .Progress.Text = "Your device is safe"
                    .butScan.Text = "Rescan"

                    .butFactory.ForeColor = Color.GreenYellow
                    .butFactory.BorderColor = Color.GreenYellow

                    .butJunk.ForeColor = Color.GreenYellow
                    .butJunk.BorderColor = Color.GreenYellow

                    .butDalvik.ForeColor = Color.GreenYellow
                    .butDalvik.BorderColor = Color.GreenYellow

                    If isRoot Or isInsecure Then
                        .rdFull.Enabled = True
                        .rdFull.Checked = True
                        .lbFull.ForeColor = Color.GreenYellow

                        .rdQuick.Enabled = True
                        .lbQuick.ForeColor = Color.GreenYellow

                    Else

                        .rdQuick.Enabled = True
                        .rdQuick.Checked = True
                        .lbQuick.ForeColor = Color.GreenYellow

                        .rdFull.Enabled = False
                        .lbFull.ForeColor = Color.White

                    End If

                    .chkSus.Enabled = True
                    .lblSus.ForeColor = Color.GreenYellow

                    resetScanVariable()

                Else
                    .lbItems.Text = "Virus item"
                    .Log.Text = VirusNo
                    .Status.ForeColor = Color.White
                    .Status.Text = "Waiting"
                    .lbStatus.Text = "Recommended"
                    .Virus.Text = "Need to clean immediately"
                    .Progress.Text = "Ready to clean"
                    .butScan.Text = "Clean"
                End If

                If Directory.Exists("Temp") Then Directory.Delete("Temp", True)

            End With

        Catch ex As Exception

        End Try

    End Sub

#End Region

#Region "CLEAN"

    Private Stage As Integer = 1
    Private tempVirusNo As Integer
    Public Sub startClean()

        If isRoot Or isCustom Or isInsecure Then

            busyState()

            If checkMountPointDD() Then

                With Form1

                    .Log.Text = "Initializing"
                    .Info.Text = "Preparing to clean"

                    .Virus.ForeColor = Color.Red
                    .Virus.Text = "Don't remove your device"

                    .lbItems.Text = "Item"
                    .lbScan.Text = "Items cleaned"
                    .lbStatus.Text = "Warning"

                    .Status.Text = "In progress"
                    .Progress.Text = "Staring process to clean"

                    .ProgBarPlus1.Visible = True
                    .ProgBarPlus1.Value = 0
                    .ProgBarPlus1.CylonRun = True

                End With

                'install chattr binary
                With Form1
                    .lbStatus.Text = "Task"
                    .Virus.ForeColor = Color.GreenYellow
                    .Virus.Text = "Installing binary file"
                End With

                installBinary()

                'If checkBBisNormal() Then
                'clean process start
                CleanProcessStart()
                ' End If

            Else

                'install chattr binary
                With Form1
                    .lbStatus.Text = "Task"
                    .Virus.ForeColor = Color.GreenYellow
                    .Virus.Text = "Installing binary file"
                End With

                installBinary()

                'if not mount then kill process

                With Form1
                    .lbStatus.Text = "Task"
                    .Virus.ForeColor = Color.GreenYellow
                    .Virus.Text = "Repairing unmountable system partition"
                End With

                If createMountPointAA() Then

                    CleanProcessStart()

                Else
                    frmRootAcessRequire.ShowDialog()
                End If

            End If
        Else
            frmRootAcessRequire.ShowDialog()
        End If
    End Sub
    Private Sub CleanProcessStart()

        'get all package names
        SearchApkPackageNameDoWork()
        'get data folders
        SearchFolderInDataDoWork()
        'get dalvik-cache folder
        SearchFolderInDalvikCacheDoWork()
        'arrange Virus list to clean
        arrangeVirusList()

        'clean virus for 3 stages
        While Stage < 5

            If State = "Disconnected" Or StopSignal Then
                StopProcess()
                Exit Sub
            End If

            cleanTask()

            If VirusList = "" Then
                Exit While
            End If

            Stage += 1

        End While

        '***********************************************************************************
        'if virus is cleaned
        If VirusList = "" Then

            'fixing debuggerd
            fixingDebuggerD()

            'fix install-recovery.sh
            cleanInstallRecoverySH()

            'fix hosts
            FixHosts()

            'clean launcher
            CleanLauncher()

            clearTemp()

            frmCleanOption.ShowDialog()

            cleanAdditionalOptions()

            Warning2.ShowDialog()

            With Form1
                .Progress.Text = "Rebooting"
                .Status.Text = "Busy"
            End With

            Dim bwkReboot As New BackgroundWorker
            AddHandler bwkReboot.DoWork, New DoWorkEventHandler(AddressOf RebootDoWork)
            bwkReboot.RunWorkerAsync()

            While bwkReboot.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

        Else
            Warning3.ShowDialog()
        End If

    End Sub
    Private Sub RebootDoWork()
        Adb.RunAdbCommandNoReturn(Device, "reboot")
    End Sub

#Region "REPAIR CREATE MOUNT POINT"

    Private FiletoKill As String
    Private mountCmd As String
    Private Function createMountPointAA() As Boolean

        Dim result As Boolean = False

        searchFiletoKill("/sbin")

        If Not checkMountPointDD() Then

            searchFiletoKill("/system/bin")

            If Not checkMountPointDD() Then

                searchFiletoKill("/system/xbin")

                If checkMountPointDD() Then
                    result = True
                End If

            Else
                result = True
            End If

        Else
            result = True
        End If

        Return result
    End Function
    Public Sub searchFiletoKill(partition As String)

        Using r As New StringReader(VirusList)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine
                If line.StartsWith(partition) Then
                    Dim spl() As String = line.Split("/")
                    Dim kFile As String = spl(spl.Length - 1)

                    killProcFile(kFile)

                End If
            End While
        End Using

    End Sub
    Private Sub killProcFile(file As String)
        FiletoKill = file

        Dim bwkKillFileProc As New BackgroundWorker
        AddHandler bwkKillFileProc.DoWork, New DoWorkEventHandler(AddressOf killProcFileDoWork)
        bwkKillFileProc.RunWorkerAsync()

        While bwkKillFileProc.IsBusy
            Application.DoEvents()
            System.Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub killProcFileDoWork()

        If isRoot Then
            Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox killall " & FiletoKill)
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox killall " & FiletoKill)
        ElseIf isInsecure Then
            Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox killall " & FiletoKill)
        End If

    End Sub
    Private Function checkMountPointDD() As Boolean

        Dim result As Boolean = False

        Dim bwkMountCmd As New BackgroundWorker
        AddHandler bwkMountCmd.DoWork, New DoWorkEventHandler(AddressOf MountCmdDoWork)
        bwkMountCmd.RunWorkerAsync()

        While bwkMountCmd.IsBusy
            Application.DoEvents()
            System.Threading.Thread.Sleep(100)
        End While

        Using r As New StringReader(mountCmd)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.Contains(" /system ") And line.Contains(" rw,") Then
                    result = True
                    Exit While
                End If
            End While
        End Using

        Return result
    End Function
    Private Sub MountCmdDoWork()

        If isRoot Then
            Adb.RunAdbShellCommandNoReturn(Device, True, "mount -o remount,rw /system /system")
            mountCmd = Adb.RunAdbShellCommand(Device, True, "mount")
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "mount -o remount,rw /system /system")
            mountCmd = RunAdbShellCustomBinary(Device, CustomName, True, "mount")
        ElseIf isInsecure Then
            Adb.RunAdbShellCommandNoReturn(Device, False, "mount -o remount,rw /system /system")
            mountCmd = Adb.RunAdbShellCommand(Device, False, "mount")
        End If

    End Sub

#End Region

#Region "CLEAN TASK"
    Private Sub arrangeVirusList()

        Dim tempVirus As String = ""

        'sbin first
        Using r As New StringReader(VirusList)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("/sbin") Then
                    If tempVirus = "" Then
                        tempVirus = line
                    Else
                        tempVirus += vbNewLine & line
                    End If
                End If

            End While
        End Using

        Using r As New StringReader(VirusList)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.StartsWith("/system/xbin") Or line.StartsWith("/system/bin") Then
                    If tempVirus = "" Then
                        tempVirus = line
                    Else
                        tempVirus += vbNewLine & line
                    End If
                End If
            End While
        End Using

        Using r As New StringReader(VirusList)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.EndsWith(".apk") Then
                    If Not tempVirus = "" Then
                        If Not isExistVirusList(tempVirus, line) Then
                            tempVirus += vbNewLine & line
                        End If
                    Else
                        tempVirus = line
                    End If
                End If

            End While
        End Using

        Using r As New StringReader(VirusList)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If Not tempVirus = "" Then
                    If Not isExistVirusList(tempVirus, line) Then
                        tempVirus += vbNewLine & line
                    End If
                Else
                    tempVirus = line
                End If

            End While
        End Using

        VirusList = tempVirus

    End Sub
    Private Function isExistVirusList(list As String, findString As String) As Boolean
        Dim result As Boolean = False

        Using r As New StringReader(list)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line = findString Then
                    result = True
                End If

            End While
        End Using

        Return result
    End Function
    Private Sub cleanTask()

        Try

            With Form1

                currentNo = 1

                Select Case Stage
                    Case 1
                        .Progress.Text = "Cleaning threats (Stage 1)"
                    Case 2
                        .Progress.Text = "Cleaning threats (Stage 2)"
                    Case 3
                        .Progress.Text = "Cleaning threats (Stage 3)"
                    Case 4
                        .Progress.Text = "Cleaning threats (Stage 4)"
                End Select

                If Not Stage = 4 Then

                    Using r As New StringReader(VirusList)
                        Dim line As String

                        While Not r.Peek = -1
                            line = r.ReadLine
                            currentPath = line

                            If State = "Disconnected" Or StopSignal Then
                                StopProcess()
                                Exit Sub
                            End If

                            'log
                            .Log.ForeColor = Color.GreenYellow
                            If currentPath.Length > 55 Then
                                .Log.Text = currentPath.Substring(0, 50) & " ..."
                            Else
                                .Log.Text = currentPath
                            End If

                            'info
                            .Info.Text = currentNo & " Of " & VirusNo

                            'task
                            .lbStatus.Text = "Task"
                            .Virus.ForeColor = Color.GreenYellow
                            .Virus.Text = "Collecting information"

                            .ProgBarPlus1.Value = Int((currentNo / VirusNo) * 100)

                            If line.EndsWith(".so") Then

                                If Stage = 1 Then
                                    LibCleanStage1(line)
                                ElseIf Stage = 2 Then
                                    LibCleanStage1(line)
                                ElseIf Stage = 3 Then
                                    LibCleanStage2(line)
                                End If

                            ElseIf line.EndsWith(".apk") And Not (line.StartsWith("/system/bin") Or line.StartsWith("/system/xbin")) Then

                                If Stage = 1 Then
                                    ApkCleanStage1(line)
                                ElseIf Stage = 2 Then
                                    ApkCleanStage1(line)
                                ElseIf Stage = 3 Then
                                    ApkCleanStage2(line)
                                End If

                            Else

                                If Stage = 1 Then
                                    BryCleanStage1(line)
                                ElseIf Stage = 2 Then
                                    BryCleanStage1(line)
                                ElseIf Stage = 3 Then
                                    BryCleanStage2(line)
                                End If

                            End If

                            currentNo += 1

                        End While
                    End Using

                Else
                    CleanStage3(VirusList)
                End If

                .lbStatus.Text = "Task"
                .Virus.ForeColor = Color.GreenYellow
                .Virus.Text = "Rechecking threats"
                tempVirusNo = VirusNo

                RecheckforVirus(VirusList)

            End With

        Catch ex As Exception

        End Try
    End Sub
    Private Sub RebootTask()

        Dim waitLoading As Boolean = False

        With Form1

            If Not waitLoading Then

                .Progress.Text = "Process will continue after rebooting"
                .Log.Text = "Rebooting device to safemode"
                tmConnection.Enabled = False

                Dim bwkReboot As New BackgroundWorker
                AddHandler bwkReboot.DoWork, New DoWorkEventHandler(AddressOf RebootDevice)
                bwkReboot.RunWorkerAsync()

                While bwkReboot.IsBusy
                    Application.DoEvents()
                    Threading.Thread.Sleep(100)
                End While

                While waitLoading = False

                    .Log.Text = "Wait for device"

                    Dim bwkWaiting As New BackgroundWorker
                    AddHandler bwkWaiting.DoWork, New DoWorkEventHandler(AddressOf WaitingDevice)
                    bwkWaiting.RunWorkerAsync()

                    While bwkWaiting.IsBusy
                        Application.DoEvents()
                        Threading.Thread.Sleep(100)
                    End While

                    If State = "ONLINE" Then waitLoading = True

                End While

            End If

            System.Threading.Thread.Sleep(2000)
            tmConnection.Enabled = True

        End With

    End Sub

#End Region

#Region "CLEAN PROCESSES"

#Region "INSTALL BINARY"
    Private Sub installBinary()

        Dim bwkInstallBanary As New BackgroundWorker
        AddHandler bwkInstallBanary.DoWork, New DoWorkEventHandler(AddressOf installBryProc)
        bwkInstallBanary.RunWorkerAsync()

        While bwkInstallBanary.IsBusy
            Application.DoEvents()
        End While

    End Sub
    Private Sub installBryProc()

        If Not checkBBisNormal() Then

            If infoArch = "ARM" Or infoArch = "AAR" Then
                Adb.RunAdbCommandNoReturn(Device, "push Resources\TELEComArmLib.dll /data/local/tmp/busybox")
            Else
                Adb.RunAdbCommandNoReturn(Device, "push Resources\TELEComMipsLib.dll /data/local/tmp/busybox")
            End If

            If isRoot Then
                Adb.RunAdbShellCommandNoReturn(Device, True, "chmod 6777 /data/local/tmp/busybox")
            ElseIf isCustom Then
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "chmod 6777 /data/local/tmp/busybox")
            ElseIf isInsecure Then
                Adb.RunAdbShellCommandNoReturn(Device, False, "chmod 6777 /data/local/tmp/busybox")
            End If

        End If

    End Sub
    Private Function checkBBisNormal() As Boolean

        Dim result As Boolean = False
        Dim cmdBB As String = ""

        If isRoot Then
            cmdBB = Adb.RunAdbShellCommand(Device, True, "/data/local/tmp/busybox")
        ElseIf isCustom Then
            cmdBB = RunAdbShellCustomBinary(Device, CustomName, True, "/data/local/tmp/busybox")
        ElseIf isInsecure Then
            cmdBB = Adb.RunAdbShellCommand(Device, False, "/data/local/tmp/busybox")
        End If

        If cmdBB.Contains("[") Or cmdBB.Contains("[[") Or cmdBB.Contains("acpid") Then
            result = True
        Else
            result = False
        End If

        Return result
    End Function

#End Region

#Region "RECHECK VIRUS"

    Private isExist As String
    Private isExistFile As Boolean = False
    Private Sub RecheckforVirus(list As String)

        Dim temp As String = ""
        Dim currentVirus As Integer = 1
        VirusNo = 0

        With Form1

            Using r As New StringReader(list)
                Dim line As String

                While Not r.Peek = -1
                    line = r.ReadLine

                    'log
                    .Log.ForeColor = Color.GreenYellow
                    If line.Length > 55 Then
                        .Log.Text = line.Substring(0, 50) & " ..."
                    Else
                        .Log.Text = line
                    End If

                    'info
                    .Info.Text = currentVirus & " Of " & tempVirusNo

                    .ProgBarPlus1.Value = Int((currentVirus / tempVirusNo) * 100)

                    isExist = line


                    Dim bwkisExist As New BackgroundWorker
                    AddHandler bwkisExist.DoWork, New DoWorkEventHandler(AddressOf isExistVirus)
                    bwkisExist.RunWorkerAsync()

                    While bwkisExist.IsBusy
                        Application.DoEvents()
                        Threading.Thread.Sleep(100)
                    End While

                    If isExistFile Then
                        VirusNo += 1

                        If temp = "" Then
                            temp = line
                        Else
                            temp += vbNewLine & line
                        End If

                    End If

                    currentVirus += 1

                End While

            End Using

        End With

        VirusList = temp

    End Sub
    Private Sub isExistVirus()

        isExistFile = False
        If isCustom And isExist.Contains(CustomName) Then Exit Sub

        Dim result As String = ""
        If isRoot Then
            result = Adb.RunAdbShellCommand(Device, True, "ls " & isExist)
        ElseIf isCustom Then
            result = RunAdbShellCustomBinary(Device, CustomName, True, "ls " & isExist)
        ElseIf isInsecure Then
            result = Adb.RunAdbShellCommand(Device, False, "ls " & isExist)
        End If

        If Not result.Contains("No such file or directory") Then
            isExistFile = True
        End If

    End Sub

#End Region

#Region "CLEAN STAGE 1"

#Region "APK"

    Private delApk As String
    Private Sub ApkCleanStage1(FilePath As String)

        delApk = "/data/local/tmp/busybox mount -o remount,rw /system /system"

        Dim path As String = ""
        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            delApk += vbNewLine & "/data/local/tmp/busybox rm -r -f " & path
        Else

            Dim ApkPkgName As String = GetApkPackageName(FilePath)

            If ApkPkgName = "" Then

                delApk += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path & vbNewLine & "/data/local/tmp/busybox rm -r -f " & path

            Else

                Dim pkgProcess As String = SearchAndroidProcess(ApkPkgName, 1)

                If pkgProcess = "" Then

                    delApk += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path & vbNewLine & "/data/local/tmp/busybox rm -r -f " & path

                    'check is exist in /data/data
                    If checkinDataFolder(ApkPkgName) Then
                        delApk += vbNewLine & "/data/local/tmp/busybox rm -r -f /data/data/" & ApkPkgName
                    End If

                    'check is exist in /data/dalvik-cache
                    Dim dalvikCache As String = checkinDalvikCache(ApkPkgName)
                    If Not dalvikCache = "" Then
                        delApk += vbNewLine & "/data/local/tmp/busybox rm -r -f /data/dalvik-cache/" & dalvikCache
                    End If

                Else
                    'kill process
                    delApk += vbNewLine & pkgProcess

                    delApk += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path

                    'and remove file
                    delApk += vbNewLine & "/data/local/tmp/busybox rm -r -f " & path

                    'if is exist in /data/data
                    If checkinDataFolder(ApkPkgName) Then
                        delApk += vbNewLine & "/data/local/tmp/busybox rm -r -f /data/data/" & ApkPkgName
                    End If

                    'If is exist in /data/dalvik-cache
                    Dim dalvikCache As String = checkinDalvikCache(ApkPkgName)
                    If Not dalvikCache = "" Then
                        delApk += vbNewLine & "/data/local/tmp/busybox rm -r -f /data/dalvik-cache/" & dalvikCache
                    End If

                End If

            End If

        End If

        If Not delApk = "" Then delAPKDoWork()

    End Sub
    Private Sub delAPKDoWork()

        With Form1
            .lbStatus.Text = "Task"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Cleaning threat"
        End With

        Dim bwkDelApk As New BackgroundWorker
        AddHandler bwkDelApk.DoWork, New DoWorkEventHandler(AddressOf delAPKProc)
        bwkDelApk.RunWorkerAsync()

        While bwkDelApk.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub delAPKProc()

        Using r As New StringReader(delApk)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If isRoot Then
                    Adb.RunAdbShellCommandNoReturn(Device, True, line)
                ElseIf isCustom Then
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, line)
                ElseIf isInsecure Then
                    Adb.RunAdbShellCommandNoReturn(Device, False, line)
                End If

            End While

        End Using

    End Sub

#End Region

#Region "LIBARY"
    Private delLib As String
    Private Sub LibCleanStage1(FilePath As String)

        Dim path As String = "/data/local/tmp/busybox mount -o remount,rw /system /system"

        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            delLib += vbNewLine & "/data/local/tmp/busybox rm -r -f " & path
        Else
            delLib += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path & vbNewLine & "/data/local/tmp/busybox rm -r -f " & path
        End If

        If Not delLib = "" Then delLibDoWork()

    End Sub
    Private Sub delLibDoWork()

        With Form1
            .lbStatus.Text = "Task"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Cleaning threat"
        End With

        Dim bwkDelLibary As New BackgroundWorker
        AddHandler bwkDelLibary.DoWork, New DoWorkEventHandler(AddressOf delLibProc)
        bwkDelLibary.RunWorkerAsync()

        While bwkDelLibary.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub delLibProc()

        Using r As New StringReader(delLib)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If isRoot Then
                    Adb.RunAdbShellCommandNoReturn(Device, True, line)
                ElseIf isCustom Then
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, line)
                ElseIf isInsecure Then
                    Adb.RunAdbShellCommandNoReturn(Device, False, line)
                End If

            End While
        End Using

    End Sub

#End Region

#Region "BINARY"
    Private delBry As String
    Private Sub BryCleanStage1(FilePath As String)

        If FilePath.StartsWith("/sbin") Then
            delBry = "/data/local/tmp/busybox mount -o remount,rw / /"
        Else
            delBry = "/data/local/tmp/busybox mount -o remount,rw /system /system"
        End If

        Dim path As String = ""
        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            delBry += vbNewLine & "/data/local/tmp/busybox rm -r -f " & path
        Else

            Dim bryProcess As String = SearchAndroidProcess(FilePath, 1)

            If bryProcess = "" Then

                delBry += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path & vbNewLine & "/data/local/tmp/busybox rm -r -f " & path

            Else

                delBry += vbNewLine & bryProcess

                delBry += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path

                delBry += vbNewLine & "/data/local/tmp/busybox rm -r -f " & path

            End If

        End If

        If Not delBry = "" Then delBryDoWork()

    End Sub
    Private Sub delBryDoWork()

        With Form1
            .lbStatus.Text = "Task"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Cleaning threat"
        End With

        Dim bwkDelBinary As New BackgroundWorker
        AddHandler bwkDelBinary.DoWork, New DoWorkEventHandler(AddressOf delBryProc)
        bwkDelBinary.RunWorkerAsync()

        While bwkDelBinary.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub delBryProc()

        Using r As New StringReader(delBry)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If isRoot Then
                    Adb.RunAdbShellCommand(Device, True, line)
                ElseIf isCustom Then
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, line)
                ElseIf isInsecure Then
                    Adb.RunAdbShellCommandNoReturn(Device, False, line)
                End If

            End While
        End Using

    End Sub

#End Region

#End Region

#Region "CLEAN STAGE 2"

#Region "APK"
    Private Sub ApkCleanStage2(FilePath As String)

        delApk = "/data/local/tmp/busybox mount -o remount,rw /system /system"

        Dim path As String = ""
        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            delApk += vbNewLine & "/data/local/tmp/busybox rm -r -f " & path
        Else

            Dim ApkPkgName As String = GetApkPackageName(FilePath)

            If ApkPkgName = "" Then

                delApk += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path & " && /data/local/tmp/busybox rm -r -f " & path

            Else

                Dim pkgProcess As String = SearchAndroidProcess(ApkPkgName, 2)

                If pkgProcess = "" Then

                    delApk += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path & " && /data/local/tmp/busybox rm -r -f " & path

                    If checkinDataFolder(ApkPkgName) Then
                        delApk += " && /data/local/tmp/busybox rm -r -f /data/data/" & ApkPkgName
                    End If

                Else

                    delApk += vbNewLine & pkgProcess

                    delApk += " && /data/local/tmp/busybox chattr -iaA " & path

                    delApk += " && /data/local/tmp/busybox rm -r -f " & path

                    If checkinDataFolder(ApkPkgName) Then
                        delApk += " && /data/local/tmp/busybox rm -r -f /data/data/" & ApkPkgName
                    End If

                End If

            End If

        End If

        If Not delApk = "" Then delAPKDoWork2()

    End Sub
    Private Sub delAPKDoWork2()

        With Form1
            .lbStatus.Text = "Task"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Cleaning"
        End With

        Dim bwkDelApk2 As New BackgroundWorker
        AddHandler bwkDelApk2.DoWork, New DoWorkEventHandler(AddressOf delAPKProc2)
        bwkDelApk2.RunWorkerAsync()

        While bwkDelApk2.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub delAPKProc2()

        Using r As New StringReader(delApk)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If isRoot Then
                    Adb.RunAdbShellCommandNoReturn(Device, True, line)
                ElseIf isCustom Then
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, line)
                ElseIf isInsecure Then
                    Adb.RunAdbShellCommandNoReturn(Device, False, line)
                End If

            End While
        End Using

    End Sub

#End Region

#Region "LIBARY"
    Private Sub LibCleanStage2(FilePath As String)

        delLib = "/data/local/tmp/busybox mount -o remount,rw /system /system"

        Dim path As String = ""
        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            delLib += vbNewLine & "/data/local/tmp/busybox rm -r -f " & path
        Else
            delLib += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path & " && /data/local/tmp/busybox rm -r -f " & path
        End If

        If Not delLib = "" Then delLibDoWork2()

    End Sub
    Private Sub delLibDoWork2()

        With Form1
            .lbStatus.Text = "Task"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Cleaning"
        End With

        Dim bwkDelLibary2 As New BackgroundWorker
        AddHandler bwkDelLibary2.DoWork, New DoWorkEventHandler(AddressOf delLibProc2)
        bwkDelLibary2.RunWorkerAsync()

        While bwkDelLibary2.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub delLibProc2()

        Using r As New StringReader(delLib)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If isRoot Then
                    Adb.RunAdbShellCommandNoReturn(Device, True, line)
                ElseIf isCustom Then
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, line)
                ElseIf isInsecure Then
                    Adb.RunAdbShellCommandNoReturn(Device, False, line)
                End If

            End While
        End Using

    End Sub

#End Region

#Region "BINARY"
    Private Sub BryCleanStage2(FilePath As String)

        If FilePath.StartsWith("/sbin") Then
            delBry = "/data/local/tmp/busybox mount -o remount,rw / /"
        Else
            delBry = "/data/local/tmp/busybox mount -o remount,rw /system /system"
        End If

        Dim path As String = ""
        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            delBry += vbNewLine & "/data/local/tmp/busybox rm -r -f " & path
        Else

            Dim bryProcess As String = SearchAndroidProcess(FilePath, 2)

            If bryProcess = "" Then

                delBry += vbNewLine & "/data/local/tmp/busybox chattr -iaA " & path & " && /data/local/tmp/busybox rm -r -f " & path

            Else
                delBry += vbNewLine & bryProcess

                delBry += " && /data/local/tmp/busybox chattr -iaA " & path

                delBry += " && /data/local/tmp/busybox rm -r -f " & path

            End If

        End If

        If Not delBry = "" Then delBryDoWork2()

    End Sub
    Private Sub delBryDoWork2()

        With Form1
            .lbStatus.Text = "Task"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Cleaning"
        End With

        Dim bwkDelBinary2 As New BackgroundWorker
        AddHandler bwkDelBinary2.DoWork, New DoWorkEventHandler(AddressOf delBryProc2)
        bwkDelBinary2.RunWorkerAsync()

        While bwkDelBinary2.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub delBryProc2()

        Using r As New StringReader(delBry)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If isRoot Then
                    Adb.RunAdbShellCommandNoReturn(Device, True, line)
                ElseIf isCustom Then
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, line)
                ElseIf isInsecure Then
                    Adb.RunAdbShellCommandNoReturn(Device, False, line)
                End If

            End While
        End Using

    End Sub

#End Region

#End Region

#Region "CLEAN STAGE 3"

    Private delAll As String
    Private Sub CleanStage3(FilePath As String)

        delAll = ""

        If Not FilePath = "" Then

            Using r As New StringReader(FilePath)
                Dim line As String

                While Not r.Peek = -1
                    line = r.ReadLine

                    If line.EndsWith(".apk") Then
                        ApkCleanStage3(line)
                    ElseIf line.EndsWith(".so") Then
                        LibCleanStage3(line)
                    Else
                        BryCleanStage3(line)
                    End If

                End While
            End Using

            If Not delAll = "" Then delCleanStage3DoWork()

        End If

    End Sub
    Private Sub delCleanStage3DoWork()

        With Form1
            .lbStatus.Text = "Task"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Cleaning"
        End With

        Dim bwkCStage3 As New BackgroundWorker
        AddHandler bwkCStage3.DoWork, New DoWorkEventHandler(AddressOf CStage3)
        bwkCStage3.RunWorkerAsync()

        While bwkCStage3.IsBusy
            Application.DoEvents()
            Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub CStage3()

        If isRoot Then
            Adb.RunAdbShellCommandNoReturn(Device, True, "mount -o remount,rw / /")
            Adb.RunAdbShellCommandNoReturn(Device, True, "mount -o remount,rw /system /system")
            Adb.RunAdbShellCommandNoReturn(Device, True, delAll)
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "mount -o remount,rw / /")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "mount -o remount,rw /system /system")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, delAll)
        ElseIf isInsecure Then
            Adb.RunAdbShellCommandNoReturn(Device, False, "mount -o remount,rw / /")
            Adb.RunAdbShellCommandNoReturn(Device, False, "mount -o remount,rw /system /system")
            Adb.RunAdbShellCommandNoReturn(Device, False, delAll)
        End If

    End Sub

#Region "APK"
    Private Sub ApkCleanStage3(FilePath As String)

        Dim temp As String = ""
        Dim path As String = ""
        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            temp = "/data/local/tmp/busybox rm -r -f " & path
        Else
            Dim ApkPkgName As String = GetApkPackageName(FilePath)

            If ApkPkgName = "" Then

                temp = "/data/local/tmp/busybox chattr -iaA " & path & " && /data/local/tmp/busybox rm -r -f " & path

            Else

                Dim pkgProcess As String = SearchAndroidProcess(ApkPkgName, 2)

                If pkgProcess = "" Then

                    temp = "/data/local/tmp/busybox chattr -iaA " & path & " && /data/local/tmp/busybox rm -r -f " & path

                Else

                    temp = pkgProcess

                    temp += " && /data/local/tmp/busybox chattr -iaA " & path

                    temp += " && /data/local/tmp/busybox rm -r -f " & path

                End If

            End If
        End If

        If delAll = "" Then
            delAll = temp
        Else
            delAll += " && " & temp
        End If

    End Sub

#End Region

#Region "LIBARY"
    Private Sub LibCleanStage3(FilePath As String)

        Dim temp As String = ""
        Dim path As String = ""
        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            temp = "/data/local/tmp/busybox rm -r -f " & path
        Else
            temp = "/data/local/tmp/busybox chattr -iaA " & path & " && /data/local/tmp/busybox rm -r -f " & path
        End If

        If delAll = "" Then
            delAll = temp
        Else
            delAll += " && " & temp
        End If

    End Sub

#End Region

#Region "BINARY"
    Private Sub BryCleanStage3(FilePath As String)

        Dim temp As String = ""
        Dim path As String = ""
        If FilePath.Contains(" ") Then
            path = "'" & FilePath & "'"
        Else
            path = FilePath
        End If

        If FilePath.StartsWith("/mnt") Or FilePath.StartsWith("/storage") Or FilePath.StartsWith("/sdcard") Then
            temp = "/data/local/tmp/busybox rm -r -f " & path
        Else

            Dim bryProcess As String = SearchAndroidProcess(FilePath, 2)

            If bryProcess = "" Then

                temp = "/data/local/tmp/busybox chattr -iaA " & path & " && /data/local/tmp/busybox rm -r -f " & path

            Else
                temp = bryProcess

                temp += " && /data/local/tmp/busybox chattr -iaA " & path

                temp += " && /data/local/tmp/busybox rm -r -f " & path

            End If

        End If

        If delAll = "" Then
            delAll = temp
        Else
            delAll += " && " & temp
        End If

    End Sub

#End Region

#End Region

#Region "REBOOT"
    Private Sub RebootDevice()

        If isRoot Then
            Adb.RunAdbShellCommandNoReturn(Device, True, "setprop persist.sys.safemode 1")
            Adb.RunAdbShellCommandNoReturn(Device, True, "echo ""1"" > /data/property/persist.sys.safemode")
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "setprop persist.sys.safemode 1")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "echo ""1"" > /data/property/persist.sys.safemode")
        ElseIf isInsecure Then
            Adb.RunAdbShellCommandNoReturn(Device, False, "setprop persist.sys.safemode 1")
            Adb.RunAdbShellCommandNoReturn(Device, False, "echo ""1"" > /data/property/persist.sys.safemode")
        End If

        Adb.RunAdbCommandNoReturn(Device, "reboot")
        State = ""

    End Sub
    Private Sub WaitingDevice()

        If Android.HasConnectedDevices Then
            Dim serial As String = Android.ConnectedDevices(0)
            Device = Android.GetConnectedDevice(serial)
            State = Device.State.ToString()
        End If

    End Sub

#End Region

#End Region

#Region "EXTERNAL FUNCTIONS"

#Region "GET PACKAGES NAMES"

    Private allPackages As String

    Private Function GetApkPackageName(FilePath As String) As String

        ' allPackages = ""
        Dim result As String = ""

        If allPackages = "" Then
            SearchApkPackageNameDoWork()
        End If

        Using r As New StringReader(allPackages)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If Not line = "" Then
                    If line.Contains(FilePath) Then
                        result = line.Substring(line.IndexOf("=") + 1)
                    End If
                End If
            End While
        End Using

        Return result
    End Function
    Private Sub SearchApkPackageNameDoWork()

        Dim bwkGetAllPackagesName As New BackgroundWorker
        AddHandler bwkGetAllPackagesName.DoWork, New DoWorkEventHandler(AddressOf SearchApkPackageName)
        bwkGetAllPackagesName.RunWorkerAsync()

        While bwkGetAllPackagesName.IsBusy
            Application.DoEvents()
            System.Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub SearchApkPackageName()

        If isRoot Then
            allPackages = Adb.RunAdbShellCommand(Device, True, "pm list packages -f")
        ElseIf isCustom Then
            allPackages = RunAdbShellCustomBinary(Device, currentName, True, "pm list packages -f")
        ElseIf isInsecure Then
            allPackages = Adb.RunAdbShellCommand(Device, False, "pm list packages -f")
        End If

    End Sub

#End Region

#Region "SEARCH PROCESSES"

    Private ApkPid As String
    Private Function SearchAndroidProcess(procName As String, method As Integer) As String

        ApkPid = ""

        Dim result As String = ""

        Dim bwkGetAllProcess As New BackgroundWorker
        AddHandler bwkGetAllProcess.DoWork, New DoWorkEventHandler(AddressOf getAllAndroidProcess)
        bwkGetAllProcess.RunWorkerAsync()

        While bwkGetAllProcess.IsBusy
            Application.DoEvents()
            System.Threading.Thread.Sleep(100)
        End While

        If Not ApkPid = "" Then
            Using r As New StringReader(ApkPid)
                Dim line As String

                While Not r.Peek = -1
                    line = r.ReadLine

                    If line.Contains(" ") And Not line = "" Then
                        Dim spl() As String = line.Split(" ")
                        Dim name As String = spl(spl.Length - 1)

                        If name.Contains(procName) Then

                            For i As Integer = 0 To spl.Length - 1
                                If Not spl(i) = "" Then
                                    If Not i = 0 Then

                                        If method = 1 Then
                                            If result = "" Then
                                                result = "/data/local/tmp/busybox kill -9 " & spl(i)
                                            Else
                                                result += vbNewLine & "/data/local/tmp/busybox kill -9 " & spl(i)
                                            End If
                                            Exit For
                                        ElseIf method = 2 Then
                                            If result = "" Then
                                                result = "/data/local/tmp/busybox kill -9 " & spl(i)
                                            Else
                                                result += " && /data/local/tmp/busybox kill -9 " & spl(i)
                                            End If
                                            Exit For
                                        End If

                                    End If
                                End If
                            Next

                        End If


                    End If

                End While
            End Using
        End If

        Return result
    End Function
    Private Sub getAllAndroidProcess()
        If isRoot Then
            ApkPid = Adb.RunAdbShellCommand(Device, True, "ps")
        ElseIf isCustom Then
            ApkPid = RunAdbShellCustomBinary(Device, CustomName, True, "ps")
        ElseIf isInsecure Then
            ApkPid = Adb.RunAdbShellCommand(Device, False, "ps")
        End If
    End Sub

#End Region

#Region "CHECK /DATA/DATA"
    Private folderinData As String
    Private Function checkinDataFolder(pkgName As String) As Boolean

        Dim result As Boolean = False

        If Not folderinData = "" Then
            SearchFolderInDataDoWork()
        End If

        Using r As New StringReader(folderinData)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.Contains(pkgName) Then
                    result = True
                    Exit While
                End If

            End While
        End Using

        Return result
    End Function
    Private Sub SearchFolderInDataDoWork()

        Dim bwkSearchInData As New BackgroundWorker
        AddHandler bwkSearchInData.DoWork, New DoWorkEventHandler(AddressOf SearchFolderInData)
        bwkSearchInData.RunWorkerAsync()

        While bwkSearchInData.IsBusy
            Application.DoEvents()
            System.Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub SearchFolderInData()

        If isRoot Then
            folderinData = Adb.RunAdbShellCommand(Device, True, "ls /data/data")
        ElseIf isCustom Then
            folderinData = RunAdbShellCustomBinary(Device, CustomName, True, "ls /data/data")
        ElseIf isInsecure Then
            folderinData = Adb.RunAdbShellCommand(Device, False, "ls /data/data")
        End If

    End Sub

#End Region

#Region "CHECK /DATA/DALVIK-CACHE"

    Private folderinDalvikCache As String
    Private Function checkinDalvikCache(pkgName As String) As String

        Dim result As String = ""

        If folderinDalvikCache = "" Then
            SearchFolderInDalvikCacheDoWork()
        End If

        If Not folderinDalvikCache = "" Then
            Using r As New StringReader(folderinDalvikCache)
                Dim line As String

                While Not r.Peek = -1
                    line = r.ReadLine

                    If line.Contains(pkgName) Then
                        result = line
                        Exit While
                    End If

                End While
            End Using
        End If

        Return result
    End Function
    Private Sub SearchFolderInDalvikCacheDoWork()

        Dim bwkSearchInDalvikCache As New BackgroundWorker
        AddHandler bwkSearchInDalvikCache.DoWork, New DoWorkEventHandler(AddressOf SearchFolderInDalvikCache)
        bwkSearchInDalvikCache.RunWorkerAsync()

        While bwkSearchInDalvikCache.IsBusy
            Application.DoEvents()
            System.Threading.Thread.Sleep(100)
        End While

    End Sub
    Private Sub SearchFolderInDalvikCache()

        If isRoot Then
            folderinDalvikCache = Adb.RunAdbShellCommand(Device, True, "ls /data/dalvik-cache")
        ElseIf isCustom Then
            folderinDalvikCache = RunAdbShellCustomBinary(Device, CustomName, True, "ls /data/dalvik-cache")
        ElseIf isInsecure Then
            folderinDalvikCache = Adb.RunAdbShellCommand(Device, False, "ls /data/dalvik-cache")
        End If

    End Sub

#End Region

#End Region

#Region "ADDITIONAL CLEAN TASK"

#Region "FIXING DEBUGGERD"
    Private Sub fixingDebuggerD()

        With Form1
            .Progress.Text = "Finializing"

            .lbItems.Text = "Process"
            .Log.ForeColor = Color.GreenYellow
            .Log.Text = "Fixing logging process"

            .lbScan.Text = "Information"
            .Info.Text = "Repairing corrupted system"

            .lbStatus.Text = "Warning"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Don't remove your device"

            Dim bwkFixDebuggerd As New BackgroundWorker
            AddHandler bwkFixDebuggerd.DoWork, New DoWorkEventHandler(AddressOf FixDebuggerdDoWork)
            bwkFixDebuggerd.RunWorkerAsync()

            While bwkFixDebuggerd.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

        End With

    End Sub
    Private Sub FixDebuggerdDoWork()

        Adb.RunAdbCommandNoReturn(Device, "push Resources\TELEComddLib.dll /data/local/tmp/debuggerd")

        If isRoot Then
            Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox mount -o remount,rw /system /system")
            Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox chattr -iaA /system/bin/debuggerd")
            Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox rm -r /system/bin/debuggerd")
            Adb.RunAdbShellCommandNoReturn(Device, True, "cat /data/local/tmp/debuggerd > /system/bin/debuggerd")
            Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox chmod 4755 /system/bin/debuggerd")
            Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox chown root.shell /system/bin/debuggerd")
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox mount -o remount,rw /system /system")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox chattr -iaA /system/bin/debuggerd")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox rm -r /system/bin/debuggerd")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "cat /data/local/tmp/debuggerd > /system/bin/debuggerd")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox chmod 4755 /system/bin/debuggerd")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox chown root.shell /system/bin/debuggerd")
        ElseIf isInsecure Then
            Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox mount -o remount,rw /system /system")
            Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox chattr -iaA /system/bin/debuggerd")
            Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox rm -r /system/bin/debuggerd")
            Adb.RunAdbShellCommandNoReturn(Device, False, "cat /data/local/tmp/debuggerd > /system/bin/debuggerd")
            Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox chmod 4755 /system/bin/debuggerd")
            Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox chown root.shell /system/bin/debuggerd")
        End If

    End Sub

#End Region

#Region "STARTUP"
    Private Sub cleanInstallRecoverySH()
        With Form1

            .Progress.Text = "Finializing"

            .lbItems.Text = "Process"
            .Log.ForeColor = Color.GreenYellow
            .Log.Text = "Fixing startup processes"

            .lbScan.Text = "Information"
            .Info.Text = "Repairing corrupted system"

            .lbStatus.Text = "Warning"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Don't remove your device"

            Dim bwkFixInstallRecoverySh As New BackgroundWorker
            AddHandler bwkFixInstallRecoverySh.DoWork, New DoWorkEventHandler(AddressOf FixInstallRecoveryShDoWork)
            bwkFixInstallRecoverySh.RunWorkerAsync()

            While bwkFixInstallRecoverySh.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

        End With
    End Sub
    Private Sub FixInstallRecoveryShDoWork()

        If isRoot Then
            Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox chattr -iaA /system/etc/install-recovery.sh")
            Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox rm -r -f /system/etc/install-recovery.sh")
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox chattr -iaA /system/etc/install-recovery.sh")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox rm -r -f /system/etc/install-recovery.sh")
        ElseIf isInsecure Then
            Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox chattr -iaA /system/etc/install-recovery.sh")
            Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox rm -r -f /system/etc/install-recovery.sh")
        End If

        Dim recoveryFile As String = ""
        Dim installrecoverysh As String = Adb.RunAdbShellCommand(Device, False, "ls -al /system/xbin")
        Using r As New StringReader(installrecoverysh)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If line.EndsWith("ku.sud") Then
                    recoveryFile = "/system/xbin/ku.sud -d &"
                    Exit While
                ElseIf line.EndsWith("daemonsu") Then
                    recoveryFile = "/system/xbin/daemonsu --auto-daemon &"
                    Exit While
                End If

            End While
        End Using

        If Not recoveryFile = "" Then

            If recoveryFile = "/system/xbin/ku.sud -d &" Then
                recoveryFile = "#!/system/bin/sh" & vbNewLine & recoveryFile
            ElseIf recoveryFile = "/system/xbin/daemonsu --auto-daemon &" Then
                recoveryFile = "#!/system/bin/sh" & vbNewLine & recoveryFile & "/system/etc/install-recovery-2.sh"
            End If

            Using w As New StreamWriter("install-recovery.sh")
                w.Write(recoveryFile)
                w.Close()
            End Using

            If isRoot Then
                Adb.RunAdbCommandNoReturn(Device, "push install-recovery.sh /data/local/tmp/install-recovery.sh")
                Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox mount -o remount,rw /system /system")
                Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox dd if=/data/local/tmp/install-recovery.sh of=/system/etc/install-recovery.sh")
                Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox chmod 4755 /system/etc/install-recovery.sh")
                Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox chattr +iaA /system/etc/install-recovery.sh")
                Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox rm -r -f /data/local/tmp/install-recovery.sh")
            ElseIf isCustom Then
                Adb.RunAdbCommandNoReturn(Device, "push install-recovery.sh /data/local/tmp/install-recovery.sh")
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox mount -o remount,rw /system /system")
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox dd if=/data/local/tmp/install-recovery.sh of=/system/etc/install-recovery.sh")
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox chmod 4755 /system/etc/install-recovery.sh")
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox chattr +iaA /system/etc/install-recovery.sh")
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox rm -r -f /data/local/tmp/install-recovery.sh")
            ElseIf isInsecure Then
                Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox mount -o remount,rw /system /system")
                Adb.RunAdbCommandNoReturn(Device, "push install-recovery.sh /system/etc/install-recovery.sh")
                Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox chmod 4755 /system/etc/install-recovery.sh")
                Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox chattr +iaA /system/etc/install-recovery.sh")
            End If

            If File.Exists("install-recovery.sh") Then File.Delete("install-recovery.sh")

        End If
    End Sub

#End Region

#Region "HOSTS"
    Private Sub FixHosts()
        With Form1

            .Progress.Text = "Finializing"

            .lbItems.Text = "Process"
            .Log.ForeColor = Color.GreenYellow
            .Log.Text = "Fixing hosts file"

            .lbScan.Text = "Information"
            .Info.Text = "Repairing corrupted system"

            .lbStatus.Text = "Warning"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Don't remove your device"

            Dim bwkFixHosts As New BackgroundWorker
            AddHandler bwkFixHosts.DoWork, New DoWorkEventHandler(AddressOf FixHostsDoWork)
            bwkFixHosts.RunWorkerAsync()

            While bwkFixHosts.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

        End With
    End Sub
    Private Sub FixHostsDoWork()

        Dim hosts As String = Adb.RunAdbShellCommand(Device, False, "cat /system/etc/hosts")
        If Not hosts = "127.0.0.1                   localhost" Then
            If isRoot Then
                Adb.RunAdbShellCommandNoReturn(Device, True, "rm -r /system/etc/hosts")
                Adb.RunAdbShellCommandNoReturn(Device, True, "echo ""127.0.0.1                   localhost"" > /system/etc/hosts")
                Adb.RunAdbShellCommandNoReturn(Device, True, "chmod 644 /system/etc/hosts")
            ElseIf isCustom Then
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r /system/etc/hosts")
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "echo ""127.0.0.1                   localhost"" > /system/etc/hosts")
                RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "chmod 644 /system/etc/hosts")
            ElseIf isInsecure Then
                Adb.RunAdbShellCommandNoReturn(Device, False, "rm -r /system/etc/hosts")
                Adb.RunAdbShellCommandNoReturn(Device, False, "echo ""127.0.0.1                   localhost"" > /system/etc/hosts")
                Adb.RunAdbShellCommandNoReturn(Device, False, "chmod 644 /system/etc/hosts")
            End If
        End If
    End Sub

#End Region

#Region "LAUNCHER"
    Public Sub CleanLauncher()
        With Form1

            .Progress.Text = "Finializing"

            .lbItems.Text = "Process"
            .Log.ForeColor = Color.GreenYellow
            .Log.Text = "Fixing malwares' shortcuts"

            .lbScan.Text = "Information"
            .Info.Text = "Repairing corrupted system"

            .lbStatus.Text = "Warning"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Don't remove your device"

            Dim bwkCleanLauncher As New BackgroundWorker
            AddHandler bwkCleanLauncher.DoWork, New DoWorkEventHandler(AddressOf CleanLauncherDoWork)
            bwkCleanLauncher.RunWorkerAsync()

            While bwkCleanLauncher.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

        End With
    End Sub
    Private Sub CleanLauncherDoWork()

        Dim launcher As String = ""

        Dim getLauncher As String = Adb.RunAdbShellCommand(Device, False, "pm list packages | /data/local/tmp/busybox grep ""launcher""")

        Using r As New StringReader(getLauncher)
            Dim line As String
            While Not r.Peek = -1
                line = r.ReadLine

                If line.Contains(".launcher") Then
                    If launcher = "" Then
                        launcher = line.Substring(8)
                    Else
                        launcher += vbNewLine & line.Substring(8)
                    End If
                End If

            End While
        End Using

        Using r As New StringReader(launcher)
            Dim line As String

            While Not r.Peek = -1
                line = r.ReadLine

                If isRoot Then
                    Adb.RunAdbShellCommandNoReturn(Device, True, "/data/local/tmp/busybox rm -r -f /data/data/" & line & "/databases")
                ElseIf isCustom Then
                    RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "/data/local/tmp/busybox rm -r -f /data/data/" & line & "/databases")
                ElseIf isInsecure Then
                    Adb.RunAdbShellCommandNoReturn(Device, False, "/data/local/tmp/busybox rm -r -f /data/data/" & line & "/databases")
                End If

            End While
        End Using

    End Sub

#End Region

#Region "TEMP"
    Private Sub clearTemp()

        With Form1

            .Progress.Text = "Finializing"

            .lbItems.Text = "Process"
            .Log.ForeColor = Color.GreenYellow
            .Log.Text = "Clearing temp folder"

            .lbScan.Text = "Information"
            .Info.Text = "Repairing corrupted system"

            .lbStatus.Text = "Warning"
            .Virus.ForeColor = Color.Red
            .Virus.Text = "Don't remove your device"

            Dim bwkCleanTemp As New BackgroundWorker
            AddHandler bwkCleanTemp.DoWork, New DoWorkEventHandler(AddressOf CleanTempDoWork)
            bwkCleanTemp.RunWorkerAsync()

            While bwkCleanTemp.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

        End With

    End Sub
    Private Sub CleanTempDoWork()
        If isRoot Then
            Adb.RunAdbShellCommandNoReturn(Device, True, "rm -r /data/local/tmp/*")
            Adb.RunAdbShellCommandNoReturn(Device, True, "rm -r /data/local/tmp/.*")
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r /data/local/tmp/*")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r /data/local/tmp/.*")
        ElseIf isInsecure Then
            Adb.RunAdbShellCommandNoReturn(Device, False, "rm -r /data/local/tmp/*")
            Adb.RunAdbShellCommandNoReturn(Device, False, "rm -r /data/local/tmp/.*")
        End If
    End Sub

#End Region

#End Region

#Region "ADDITIONAL OPTIONS"

    Public intSdcard As String
    Public extSdcard As String
    Public autoMode As Boolean = False
    Public Sub cleanAdditionalOptions()

        autoMode = True

        If frmCleanOption.adtClearJunk Then
            bolJunk = True
            ButtonControl()
        End If

        If frmCleanOption.adtClearDalvik Then
            bolDalvik = True
            ButtonControl()
        End If

        If frmCleanOption.adtCleanIntSd Then

            With Form1
                .Status.Text = "In progress"
                .Progress.Text = "Clearing Phone Storage"
                .lbItems.Text = "Item"
                .Log.Text = "Formatting internal storage"
                .lbScan.Text = "Item cleared"
                .Info.Text = "Your data will be lost and can't be recovered"
                .Virus.Text = "Don't remove your device"
                .lbStatus.Text = "Warning"
            End With

            Dim bwkCleanIntSd As New BackgroundWorker
            AddHandler bwkCleanIntSd.DoWork, New DoWorkEventHandler(AddressOf CleanIntSdDoWork)
            bwkCleanIntSd.RunWorkerAsync()

            While bwkCleanIntSd.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

        End If

        If frmCleanOption.adtCleanExtSd Then

            With Form1
                .Status.Text = "In progress"
                .Progress.Text = "Clearing SD Card"
                .lbItems.Text = "Item"
                .Log.Text = "Formatting internal storage"
                .lbScan.Text = "Item cleared"
                .Info.Text = "Your data will be lost and can't be recovered"
                .Virus.Text = "Don't remove your device"
                .lbStatus.Text = "Warning"
            End With

            Dim bwkCleanExtSd As New BackgroundWorker
            AddHandler bwkCleanExtSd.DoWork, New DoWorkEventHandler(AddressOf CleanExtSdDoWork)
            bwkCleanExtSd.RunWorkerAsync()

            While bwkCleanExtSd.IsBusy
                Application.DoEvents()
                System.Threading.Thread.Sleep(100)
            End While

        End If

        If frmCleanOption.adtFactoryReset Then
            bolReset = True
            ButtonControl()
        End If

        autoMode = False

    End Sub
    Private Sub CleanIntSdDoWork()

        If isRoot Then
            Adb.RunAdbShellCommand(Device, True, "rm -r " & intSdcard & "/*")
            Adb.RunAdbShellCommand(Device, True, "rm -r " & intSdcard & "/.*")
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r " & intSdcard & "/*")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r " & intSdcard & "/.*")
        ElseIf isInsecure Then
            Adb.RunAdbShellCommand(Device, False, "rm -r " & intSdcard & "/*")
            Adb.RunAdbShellCommand(Device, False, "rm -r " & intSdcard & "/.*")
        End If

    End Sub
    Private Sub CleanExtSdDoWork()

        If isRoot Then
            Adb.RunAdbShellCommand(Device, True, "rm -r " & extSdcard & "/*")
            Adb.RunAdbShellCommand(Device, True, "rm -r " & extSdcard & "/.*")
        ElseIf isCustom Then
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r " & extSdcard & "/*")
            RunAdbShellCustomBinaryNoReturn(Device, CustomName, True, "rm -r " & extSdcard & "/.*")
        ElseIf isInsecure Then
            Adb.RunAdbShellCommand(Device, False, "rm -r " & extSdcard & "/*")
            Adb.RunAdbShellCommand(Device, False, "rm -r " & extSdcard & "/.*")
        End If

    End Sub

#End Region

#End Region

End Module

