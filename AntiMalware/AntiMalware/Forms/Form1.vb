Imports System.IO
Imports Telecom.Android
Imports System.ComponentModel
Public Class Form1

    Public tasks As List(Of OTask)
    Private WithEvents tmKillProc As New Timer
    Private WithEvents bwkKillProc As New BackgroundWorker

#Region "FORM"
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load

        With tmKillProc
            .Interval = 1000
            .Enabled = True
        End With

        'KILL ADB PROCESS
        AdbKiller()

        'INITIALIZE ADB
        Android = AndroidController.Instance

        ProductSerialNo = generateSerialNumber()

        RegState = checkActivationStatus()
        'RegState = True

        If RegState Then
            lbTrial.Text = "ACTIVATED"
            lbTrial.Visible = True
            butActivate.Visible = False
        End If

        With tmConnection
            .Interval = 500
        End With

        Me.tasks = New List(Of OTask)()

        'START CONNECTION TIMER
        tmConnection.Enabled = True

    End Sub
    Private Sub Form1_Closed(sender As Object, e As EventArgs) Handles Me.Closed, PictureBox8.Click

        If ProgBarPlus1.Visible Then
            Warning1.ShowDialog()
        Else
            Android.Dispose()
            AdbKiller()
            End
        End If

    End Sub

#End Region

#Region "LISTVIEW INITIALIZE"
    Private Sub ListView_FormatCell(sender As Object, e As BrightIdeasSoftware.FormatCellEventArgs) Handles ObjectListView1.FormatCell
        If e.ColumnIndex = 0 Then
            Dim task As OTask = DirectCast(e.Model, OTask)
            Dim decoration As New NamedDescriptionDecoration()
            decoration.ImageList = Me.ImageListLarge
            decoration.Title = task.Feature
            decoration.ImageName = task.FeatureIcon
            decoration.Description = task.Description
            e.SubItem.Decoration = decoration
            e.SubItem.ForeColor = Color.Transparent
        End If
    End Sub
    Private Sub ListView_ItemSelectionChanged(sender As Object, e As ListViewItemSelectionChangedEventArgs) Handles ObjectListView1.SelectionChanged
        If e.IsSelected Then e.Item.Selected = False
    End Sub
    Public Sub InitializeObjectListView()
        Me.OlvColumnFeature.AspectToStringConverter = Function(x As Object) ""
        Me.ObjectListView1.SetObjects(tasks)
    End Sub

#End Region

#Region "FORM MOVE"
    Dim drag As Boolean
    Dim mousex As Integer
    Dim mousey As Integer
    Private Sub A1Panel1_MouseDown(sender As Object, e As MouseEventArgs) Handles A1Panel1.MouseDown, PictureBox16.MouseDown, PictureBox11.MouseDown, PictureBox10.MouseDown
        drag = True
        mousex = Windows.Forms.Cursor.Position.X - Me.Left
        mousey = Windows.Forms.Cursor.Position.Y - Me.Top
    End Sub
    Private Sub A1Panel1_MouseMove(sender As Object, e As MouseEventArgs) Handles A1Panel1.MouseMove, PictureBox16.MouseMove, PictureBox11.MouseMove, PictureBox10.MouseMove
        If drag Then
            Me.Top = Windows.Forms.Cursor.Position.Y - mousey
            Me.Left = Windows.Forms.Cursor.Position.X - mousex
        End If
    End Sub
    Private Sub A1Panel1_MouseUp(sender As Object, e As MouseEventArgs) Handles A1Panel1.MouseUp, PictureBox16.MouseUp, PictureBox11.MouseUp, PictureBox10.MouseUp
        drag = False
    End Sub
#End Region

#Region "CONTROL BUTTONS"
    Private Sub PictureBox8_MouseMove(sender As Object, e As MouseEventArgs) Handles PictureBox8.MouseMove
        PictureBox8.Image = Image.FromStream(New FileStream("Resources\AdbWinC.dll", FileMode.Open, FileAccess.Read))
    End Sub
    Private Sub PictureBox8_MouseLeave(sender As Object, e As EventArgs) Handles PictureBox8.MouseLeave, PictureBox9.MouseLeave, PictureBox12.MouseLeave
        sender.Image = Image.FromStream(New FileStream("Resources\AdbWinD.dll", FileMode.Open, FileAccess.Read))
    End Sub
    Private Sub PictureBox9_Click(sender As Object, e As EventArgs) Handles PictureBox9.Click
        Me.WindowState = FormWindowState.Minimized
    End Sub
    Private Sub PictureBox9_MouseMove(sender As Object, e As MouseEventArgs) Handles PictureBox9.MouseMove
        PictureBox9.Image = Image.FromStream(New FileStream("Resources\AdbWinM.dll", FileMode.Open, FileAccess.Read))
    End Sub

#End Region

#Region "ABOUT MINIMIZE CLOSE"
    Private Sub PictureBox12_Click(sender As Object, e As EventArgs) Handles PictureBox12.Click
        frmAbout.ShowDialog()
    End Sub
    Private Sub PictureBox12_MouseMove(sender As Object, e As MouseEventArgs) Handles PictureBox12.MouseMove
        PictureBox12.Image = Image.FromStream(New FileStream("Resources\AdbWinA.dll", FileMode.Open, FileAccess.Read))
    End Sub
    Private Sub butActivate_ClickButtonArea(Sender As Object, e As MouseEventArgs) Handles butActivate.ClickButtonArea
        frmActivation.ShowDialog()
    End Sub
    Private Sub butActivate_MouseMove(sender As Object, e As MouseEventArgs) Handles butActivate.MouseMove
        butActivate.ForeColor = Color.MistyRose
    End Sub
    Private Sub butActivate_MouseLeave(sender As Object, e As EventArgs) Handles butActivate.MouseLeave
        butActivate.ForeColor = Color.GreenYellow
    End Sub
    Private Sub lbQuick_Click(sender As Object, e As EventArgs) Handles lbQuick.Click
        If Not rdQuick.Checked And rdQuick.Enabled Then
            rdQuick.Checked = True
        End If
    End Sub
    Private Sub lbFull_Click(sender As Object, e As EventArgs) Handles lbFull.Click
        If Not rdFull.Checked And rdFull.Enabled Then
            rdFull.Checked = True
        End If
    End Sub
    Private Sub lblSus_Click(sender As Object, e As EventArgs) Handles lblSus.Click
        If Not chkSus.Checked And chkSus.Enabled Then
            chkSus.Checked = True
        Else
            chkSus.Checked = False
        End If
    End Sub

#End Region

#Region "BUTTON EVENTS"
    Private Sub butFactory_ClickButtonArea(Sender As Object, e As MouseEventArgs) Handles butFactory.ClickButtonArea

        If butFactory.ForeColor = Color.GreenYellow Then
            bolReset = True
            ButtonControl()
        End If

    End Sub
    Private Sub butJunk_ClickButtonArea(Sender As Object, e As MouseEventArgs) Handles butJunk.ClickButtonArea

        If butJunk.ForeColor = Color.GreenYellow Then
            If isRoot Or isCustom Or isInsecure Then
                bolJunk = True
                ButtonControl()
            Else
                isJunk = True
                frmRootAcessRequire.ShowDialog()
            End If
        End If

    End Sub
    Private Sub butDalvik_ClickButtonArea(Sender As Object, e As MouseEventArgs) Handles butDalvik.ClickButtonArea

        If butDalvik.ForeColor = Color.GreenYellow Then
            If isRoot Or isCustom Or isInsecure Then
                bolDalvik = True
                ButtonControl()
            Else
                isJunk = True
                frmRootAcessRequire.ShowDialog()
            End If
        End If

    End Sub
    Private Sub butScan_ClickButtonArea(Sender As Object, e As MouseEventArgs) Handles butScan.ClickButtonArea

        If butScan.ForeColor = Color.GreenYellow Then

            Select Case butScan.Text

                Case "Scan"
                    If RegState Then
                        butScan.Text = "Stop"
                        ToolTip1.SetToolTip(butScan, "Stop from virus, malware or unwanted apps scanning process")
                        StartScan()
                    Else

                        TrialState = startTrialProcess()

                        If TrialState Then
                            butScan.Text = "Stop"
                            ToolTip1.SetToolTip(butScan, "Stop from virus, malware or unwanted apps scanning process")
                            StartScan()
                        Else
                            frmActivation.ShowDialog()
                        End If

                    End If

                Case "Clean"
                    If RegState Or TrialState Then
                        butScan.Text = "Stop"
                        ToolTip1.SetToolTip(butScan, "Stop from virus, malware or unwanted app cleanning process")
                        startClean()
                    Else

                        If TrialState Then
                            butScan.Text = "Stop"
                            ToolTip1.SetToolTip(butScan, "Stop from virus, malware or unwanted app cleanning process")
                            startClean()
                        Else
                            frmActivation.ShowDialog()
                        End If

                    End If

                Case "Stop"
                    StopSignal = True

                Case "Rescan"
                    If RegState Or TrialState Then
                        tasks.Clear()
                        ObjectListView1.Items.Clear()
                        butScan.Text = "Stop"
                        ToolTip1.SetToolTip(butScan, "Stop from virus, malware or unwanted apps scanning process")
                        StartScan()
                    Else

                        If TrialState Then
                            tasks.Clear()
                            ObjectListView1.Items.Clear()
                            butScan.Text = "Stop"
                            ToolTip1.SetToolTip(butScan, "Stop from virus, malware or unwanted apps scanning process")
                            StartScan()
                        Else
                            frmActivation.ShowDialog()
                        End If

                    End If

            End Select

        End If

    End Sub

    Private Sub butOpenLog_ClickButtonArea(Sender As Object, e As MouseEventArgs) Handles butOpenLog.ClickButtonArea

        If Not Directory.Exists(Path.Combine(Application.StartupPath, "Logs")) Then
            Directory.CreateDirectory(Path.Combine(Application.StartupPath, "Logs"))
        End If

        Dim proc As String = "Explorer.exe"
        Dim args As String = ControlChars.Quote & Path.Combine(Application.StartupPath, "Logs") & ControlChars.Quote
        Process.Start(proc, args)

    End Sub
    Private Sub butClearLog_ClickButtonArea(Sender As Object, e As MouseEventArgs) Handles butClearLog.ClickButtonArea
        If Directory.Exists(Path.Combine(Application.StartupPath, "Logs")) Then
            For Each files As String In Directory.GetFiles(Path.Combine(Application.StartupPath, "Logs"))
                File.Delete(files)
            Next
        End If
    End Sub

#End Region

#Region "UNCRACKED EVENT"
    Private Sub tmKillProc_Tick() Handles tmKillProc.Tick
        If Not bwkKillProc.IsBusy Then bwkKillProc.RunWorkerAsync()
    End Sub
    Private Sub bwkKillProc_DoWork(sender As Object, e As DoWorkEventArgs) Handles bwkKillProc.DoWork

        Dim pr As New List(Of Process)(Process.GetProcesses)

        For Each item As Process In pr
            If Not item.MainWindowHandle.ToInt32 = 0 Then
                If Not item.ProcessName = "Wuser32" And Not item.ProcessName = "explorer" Then

                    'DotNet-Dumper
                    If item.MainWindowTitle.StartsWith("DotNet") Or
                       item.MainWindowTitle.StartsWith("MegaDumper") Or
                       item.MainWindowTitle.StartsWith(".NET") Or
                       item.MainWindowTitle.StartsWith("ILSpy") Or
                       item.MainWindowTitle.StartsWith("OllyDbg") Or
                       item.MainWindowTitle.StartsWith("Dis#") Then
                        item.Kill()
                    End If

                End If
            End If
        Next

    End Sub

#End Region

End Class
Public Class OTask
    Public Sub New(FeatureIcon As String, Feature As String, Description As String, ProgressIcon As String, Progress As String, Report As String)
        Me.FeatureIcon = FeatureIcon
        Me.Feature = Feature
        Me.Description = Description
        Me.ProgressIcon = ProgressIcon
        Me.Progress = Progress
        Me.Report = Report
    End Sub

    Public FeatureIcon As String
    Public Feature As String
    Public Description As String
    Public ProgressIcon As String
    Public Progress As String
    Public Report As String
End Class
Public Class NamedDescriptionDecoration
    Inherits BrightIdeasSoftware.AbstractDecoration
    Public ImageList As ImageList
    Public ImageName As String
    Public Title As String
    Public Description As String

    Public TitleFont As New Font("Times New Roman", 10.5, FontStyle.Bold)
    Public TitleColor As Color = Color.Blue
    Public DescripionFont As New Font("Microsoft Sans Serif", 8)
    Public DescriptionColor As Color = Color.Red
    Public CellPadding As New Size(1, 1)

    Public Overrides Sub Draw(olv As BrightIdeasSoftware.ObjectListView, g As Graphics, r As Rectangle)

        Try
            Dim cellBounds As Rectangle = Me.CellBounds
            cellBounds.Inflate(-Me.CellPadding.Width, -Me.CellPadding.Height)
            Dim textBounds As Rectangle = cellBounds

            If Me.ImageList IsNot Nothing AndAlso Not [String].IsNullOrEmpty(Me.ImageName) Then
                g.DrawImage(Me.ImageList.Images(Me.ImageName), cellBounds.Location)
                textBounds.X += Me.ImageList.ImageSize.Width
                textBounds.Width -= Me.ImageList.ImageSize.Width
            End If

            'g.DrawRectangle(Pens.Red, textBounds)

            ' Draw the title
            Dim fmt As New StringFormat(StringFormatFlags.NoWrap)
            fmt.Trimming = StringTrimming.EllipsisCharacter
            fmt.Alignment = StringAlignment.Near
            fmt.LineAlignment = StringAlignment.Near

            Using b As New SolidBrush(Me.TitleColor)
                g.DrawString(Me.Title, Me.TitleFont, b, textBounds, New StringFormat)
            End Using

            'Draw the description
            Dim size As SizeF = g.MeasureString(Me.Title, Me.TitleFont, CInt(textBounds.Width), New StringFormat)
            textBounds.Y += CInt(Math.Truncate(size.Height))
            textBounds.Height -= CInt(Math.Truncate(size.Height))

            Dim fmt2 As New StringFormat()
            fmt2.Trimming = StringTrimming.EllipsisCharacter

            Using c As New SolidBrush(Me.DescriptionColor)
                g.DrawString(Me.Description, Me.DescripionFont, c, textBounds, fmt2)
            End Using

        Catch ex As Exception

        End Try

    End Sub

End Class