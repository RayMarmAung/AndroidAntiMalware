//**************************************************************************'
//* Adb.vb - Developer Ray Marm Aung (Ray -Electronics) for TELEComLib.dll *'
//**************************************************************************'
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'

using System;
using System.IO;

namespace Telecom.Android
{
    public class AdbCommand
    {

        private string _command;
        private int _timeout;
        internal string Command
        {
            get { return _command; }
        }
        internal int Timeout
        {
            get { return _timeout; }
        }
        internal AdbCommand(string command)
        {
            this._command = command;
            this._timeout = Telecom.Command.DEFAULT_TIMEOUT;
        }
        public AdbCommand WithTimeout(int timeout)
        {
            this._timeout = timeout;
            return this;
        }

    }
    public class Adb
    {

        private static object _lock = new object();
        internal const string ADB_ = "adb";
        internal const string ADB_EXE = "adb.exe";
        internal const string ADB_VERSION = "1.0.32";
        internal const string RESOURCEDIR = "Resources\\";
        public static AdbCommand FormAdbCommand(string cmd, params object[] args)
        {
            string adb_Command = null;

            if (args.Length > 0)
            {
                adb_Command = cmd;

                for (int i=0;i<=args.Length-1;i++)
                {
                    adb_Command += " " + args[i];
                }
            }
            else
            {
                adb_Command = cmd;
            }

            return new AdbCommand(adb_Command);
        }
        public static AdbCommand FormAdbCommand(Device dev, string cmd, params object[] args)
        {
            return FormAdbCommand("-s " + dev.SerialNumber + " " + cmd, args);
        }
        public static AdbCommand FormAdbShellCommand(Device dev, bool rootShell, string executable, params object[] args)
        {

            if (rootShell && !dev.HasRoot)
            {
                throw new DeviceHasNoRootException();
            }

            string shellCommand = string.Format("-s {0} shell ", dev.SerialNumber);

            if (rootShell)
                shellCommand += "su -c \"";

            shellCommand += executable;

            for (int i = 0; i <= args.Length - 1; i++)
            {
                shellCommand += " " + args[i];
            }

            if (rootShell)
                shellCommand += "\"";

            return new AdbCommand(shellCommand);

        }

        [Obsolete("Method is deprecated, please use ExecuteAdbShellCommandInputString (device, int, string...) instead")]
        public static void ExecuteAdbShellCommandInputString(Device dev, params string[] inputlines)
        {
            lock (_lock)
            {
                Command.RunProcessWriteInput(RESOURCEDIR + ADB_EXE, "shell", inputlines);
            }
        }
        public static void ExecuteAdbShellCommandInputString(Device dev, int timeout, params string[] inputlines)
        {
            lock (_lock)
            {
                Command.RunProcessWriteInput(RESOURCEDIR + ADB_EXE, "shell", timeout, inputlines);
            }
        }
        public static string ExecuteAdbCommand(AdbCommand cmd, bool forceRegular = false)
        {
            string result = "";

            lock (_lock)
            {
                result = Command.RunProcessReturnOutput(RESOURCEDIR + ADB_EXE, cmd.Command, forceRegular, cmd.Timeout);
            }

            return result;
        }      
        public static void ExecuteAdbCommandNoReturn(AdbCommand cmd)
        {
            lock (_lock)
            {
                Command.RunProcessNoReturn(RESOURCEDIR + ADB_EXE, cmd.Command, cmd.Timeout);
            }
        }
        public static object ExecuteAdbCommandReturnExitCode(AdbCommand cmd)
        {
            int result = -1;

            lock (_lock)
            {
                result = Command.RunProcessReturnExitCode(RESOURCEDIR + ADB_EXE, cmd.Command, cmd.Timeout);
            }

            return result;
        }
        public static bool ServerRunning
        {
            get { return Command.IsProcessRunning(Adb.ADB_); }
        }
        static internal void StartServer()
        {
            ExecuteAdbCommandNoReturn(Adb.FormAdbCommand("start-server"));
        }
        static internal void KillServer()
        {
            ExecuteAdbCommandNoReturn(Adb.FormAdbCommand("kill-server"));
        }
        static internal string Devices()
        {
            return ExecuteAdbCommand(Adb.FormAdbCommand("devices"));
        }
        public static string RunAdbCommand(Device dev, string cmd, params object[] args)
        {
            return Adb.ExecuteAdbCommand(Adb.FormAdbCommand(dev, cmd, args));
        }
        public static void RunAdbCommandNoReturn(Device dev, string cmd, params object[] args)
        {
            Adb.ExecuteAdbCommandNoReturn(Adb.FormAdbCommand(dev, cmd, args));
        }        
        public static string RunAdbShellCommand(Device dev, bool root, string cmd, params object[] args)
        {
            return Adb.ExecuteAdbCommand(Adb.FormAdbShellCommand(dev,root,cmd,args));
        }
        public static void RunAdbShellCommandNoReturn(Device dev, bool root, string cmd, params object[] args)
        {
            Adb.ExecuteAdbCommandNoReturn(Adb.FormAdbShellCommand(dev, root, cmd, args));
        }
    }
    public class Aapt
    {

        private static object _lock = new object();
        internal const string AAPT_ = "aapt";
        internal const string AAPT_EXE = "aapt.exe";
        internal const string RESOURCEDIR = "Resources\\";
        public static AdbCommand FormAaptCommand(string cmd, params object[] args)
        {
            string adb_Command = null;

            if (args.Length > 0)
            {
                adb_Command = cmd + " ";
            }
            else
            {
                adb_Command = cmd;
            }

            return new AdbCommand(adb_Command);
        }
        public static string ExecuteAaptCommand(AdbCommand cmd, bool forceRegular = false)
        {
            string result = "";

            lock (_lock)
            {
                result = Command.RunProcessReturnOutput(RESOURCEDIR + AAPT_EXE, cmd.Command, forceRegular, cmd.Timeout);
            }

            return result;
        }

        public static string RunAaptCommand(string cmd,params object[] args)
        {
            return Aapt.ExecuteAaptCommand(Aapt.FormAaptCommand(cmd, args));
        }
    }
    public class Zip
    {

        private static object _lock = new object();
        internal const string ZIP_ = "7z";
        internal const string ZIP_EXE = "7z.exe";
        internal const string RESOURCEDIR = "Resources\\";
        public static AdbCommand Form7zCommand(string cmd, params object[] args)
        {
            string adb_Command = null;

            if (args.Length > 0)
            {
                adb_Command = cmd + " ";
            }
            else
            {
                adb_Command = cmd;
            }

            return new AdbCommand(adb_Command);
        }
        public static string Execute7zCommand(AdbCommand cmd, bool forceRegular = false)
        {
            string result = "";

            lock (_lock)
            {
                result = Command.RunProcessReturnOutput(RESOURCEDIR + ZIP_EXE, cmd.Command, forceRegular, cmd.Timeout);
            }

            return result;
        }

        public static string Run7zCommand(string cmd, params object[] args)
        {
            return Zip.Execute7zCommand(Zip.Form7zCommand(cmd, args));
        }
    }
}
