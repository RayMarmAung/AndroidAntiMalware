//* ************************************************************************************** *
//* AndroidController.vb -Developed by Ray Marm Aung (Ray -Electronics) for TELEComLib.dll *
//* ************************************************************************************** *

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

namespace Telecom.Android
{
    public partial class AndroidController
    {

        #region "Fields"
        private const string ANDROID_TMP_FOLDER = "Temp\\";
        private static AndroidController _instance;
        private string _resourceDirectory;
        private List<string> _connectedDevices;
        #endregion
        private bool Extract_Resources = false;

        #region "Properties"
        public static AndroidController Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new AndroidController();
                    Adb.StartServer();
                }

                return _instance;
            }
        }
        public List<string> ConnectedDevices
        {

            get
            {
                UpdateDeviceList();
                return _connectedDevices;

            }
        }
        internal string ResourceDirectory
        {


            get { return _resourceDirectory; }
        }
        #endregion

        #region "Procedures"

        private AndroidController()
        {
            _connectedDevices = new List<string>();

        }

        public void Dispose()
        {

            if (Adb.ServerRunning)
            {
                Adb.KillServer();
                Thread.Sleep(1000);

            }

            AndroidController._instance = null;

        }
        public Device GetConnectedDevice()
        {

            if (HasConnectedDevices)
            {
                return new Device(_connectedDevices[0]);
            }
            else
            {
                return null;
            }

        }
        public Device GetConnectedDevice(string deviceSerial)
        {

            UpdateDeviceList();

            if (_connectedDevices.Contains(deviceSerial))
            {
                return new Device(deviceSerial);
            }
            else
            {
                return null;
            }

        }
        public bool HasConnectedDevices
        {


            get
            {
                UpdateDeviceList();
                return (_connectedDevices.Count > 0) ? true : false;

            }
        }

        public bool IsDeviceConnected(string deviceSerial)
        {

            bool state = false;
            UpdateDeviceList();

            try
            {

                foreach (string s in _connectedDevices)
                {
                    if (s.ToLower() == deviceSerial.ToLower())
                    {
                        state = true;
                    }

                }

            }
            catch 
            {
                return false;
            }

            return state;

        }
        public bool IsDeviceConnected(Device dev)
        {

            bool state = false;
            UpdateDeviceList();

            try
            {

                foreach (string d in _connectedDevices)
                {
                    if (d == dev.SerialNumber)
                    {
                        state = true;
                    }

                }

            }
            catch 
            {
                return false;
            }

            return state;

        }

        public void UpdateDeviceList()
        {
            string deviceList = null;
            _connectedDevices.Clear();

            deviceList = Adb.Devices();


            if (deviceList.Length > 29)
            {
                using (StringReader s = new StringReader(deviceList))
                {
                    string line = null;

                    while (!(s.Peek() == -1))
                    {
                        line = s.ReadLine();

                        if (line.StartsWith("List") || line.StartsWith("\r\n") || string.IsNullOrEmpty(line.Trim()))
                        {
                            continue;
                        }

                        if (!(line.IndexOf('\t') == -1))
                        {
                            line = line.Substring(0, line.IndexOf('\t'));
                            _connectedDevices.Add(line);
                        }

                    }
                }

            }

        }

        private bool _CancelRequest;
        public bool CancelWait
        {

            get { return _CancelRequest; }

            set { _CancelRequest = value; }
        }


        public void WaitForDevice()
        {
            while (!HasConnectedDevices && !CancelWait)
            {
                Thread.Sleep(250);
            }

            CancelWait = false;

        }
        #endregion

    }

}
