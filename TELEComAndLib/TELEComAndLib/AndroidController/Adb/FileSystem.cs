//* ********************************************************************************
//* FileSystem.vb Developed by Ray Marm Aung (Ray -Electronics) for TELEComLib.dll *
//* ********************************************************************************

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

namespace Telecom.Android
{
    public class MountInfo
    {

        #region "Fields"
        private string _directory = "Can't be Listed";
        private string _block = "Can't be Listed";
        private MountType _type = MountType.NONE;
        #endregion
        private string _mounttype = "Can't be Listed";

        #region "Procedures"
        internal MountInfo(string directory, string block, MountType type, string mounttype)
        {
            _directory = directory;
            _block = block;
            _type = type;
            _mounttype = mounttype;
        }
        #endregion

        #region "Properties"
        public string Directory
        {
            get { return _directory; }
        }
        public string Block
        {
            get { return _block; }
        }
        public MountType MountType
        {
            get { return _type; }
        }
        public string MountTypeInfo
        {
            get { return _mounttype; }
        }
        #endregion

    }
    public class FileSystem
    {

        #region "Fields"
        private Device _device;

        private MountInfo _systemMount;
        private const string IS_FILE = "if [ -f {0} ]; then echo \"1\"; else echo \"0\"; fi";
        #endregion
        private const string IS_DIRECTORY = "if [ -d {0} ]; then echo \"1\"; else echo \"0\"; fi";

        #region "Procedures"
        internal FileSystem(Device dev)
        {
            _device = dev;
        }
        public bool RemountSystem(MountType _type)
        {
            if (!_device.HasRoot)
            {
                return false;
            }

            AdbCommand adbCmd = Adb.FormAdbShellCommand(_device, true, "mount", "-o", "remount,rw", "/system");
            Adb.ExecuteAdbCommandNoReturn(adbCmd);

            if (_device.FileSystem.SystemMountInfo.MountType == _type)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        public ListingType FileOrDirectory(string location)
        {
            if (!_device.BusyBox.IsInstalled)
            {
                return ListingType.ERR;
            }

            AdbCommand isFile = Adb.FormAdbShellCommand(_device, false, string.Format(IS_FILE, location));
            AdbCommand isDir = Adb.FormAdbShellCommand(_device, false, string.Format(IS_DIRECTORY, location));

            string _isFile = Adb.ExecuteAdbCommand(isFile);
            string _isDir = Adb.ExecuteAdbCommand(isDir);

            if (_isFile.Contains("1"))
            {
                return ListingType.FILE;
            }
            else if (_isDir.Contains("1"))
            {
                return ListingType.DIRECTORY;
            }

            return ListingType.NONE;
        }
        public Dictionary<string, ListingType> GetFilesAndDirectories(string location)
        {
            if (location == null || string.IsNullOrEmpty(location) || Regex.IsMatch(location, "\\s"))
            {
                throw new ArgumentException("rootDir must not be null or empty!");
            }

            Dictionary<string, ListingType> filesAndDirs = new Dictionary<string, ListingType>();
            AdbCommand cmd = null;

            if (_device.BusyBox.IsInstalled)
            {
                cmd = Adb.FormAdbShellCommand(_device, true, "busybox", "ls", "-a", "-p", "l", location);
            }
            else
            {
                cmd = Adb.FormAdbShellCommand(_device, true, "ls", "-a", "-p", "-l", location);
            }

            using (StringReader reader = new StringReader(Adb.ExecuteAdbCommand(cmd)))
            {
                string line = null;

                while (reader.Peek() != -1)
                {
                    line = reader.ReadLine();

                    if (!string.IsNullOrEmpty(line) && !Regex.IsMatch(line, "\\s"))
                    {
                        filesAndDirs.Add(line, line.EndsWith("/") ? ListingType.DIRECTORY : ListingType.FILE);
                    }

                }
            }

            return filesAndDirs;
        }
        #endregion

        #region "Properties"
        public MountInfo SystemMountInfo
        {

            get
            {
                string dump = null;

                if (_device.HasRoot)
                {
                    dump = Adb.ExecuteAdbCommand(Adb.FormAdbShellCommand(_device, true, "mount"));
                }
                else
                {
                    dump = Adb.ExecuteAdbCommand(Adb.FormAdbShellCommand(_device, false, "mount"));
                }

                using (StringReader r = new StringReader(dump))
                {

                    string line = null;
                    //string[] splitline = null;
                    string dir = null;
                    string mount = null;
                    MountType type = default(MountType);
                    string mtype = null;

                    while (!(r.Peek() == -1))
                    {
                        line = r.ReadLine();
                       string[] splitline = line.Split(' ');

                        try
                        {
                            if (line.Contains(" on /system "))
                            {
                                dir = splitline[2];
                                mount = splitline[0];
                                type = (MountType)Enum.Parse(typeof(MountType), splitline[5].Substring(1, 2).ToUpper());
                                mtype = splitline[5].Substring(1, 2);

                                if (mtype == "ro")
                                {
                                    mtype = "Read Only";
                                }
                                else if (mtype == "rw")
                                {
                                    mtype = "Read Write";
                                }

                                _systemMount = new MountInfo(dir, mount, type, mtype);

                                break; // TODO: might not be correct. Was : Exit While
                            }

                            if (line.Contains(" /system "))
                            {
                                dir = splitline[1];
                                mount = splitline[0];
                                type = (MountType)Enum.Parse(typeof(MountType), splitline[3].Substring(0, 2).ToUpper());
                                mtype = splitline[3].Substring(0, 2);

                                if (mtype == "ro")
                                {
                                    mtype = "Read Only";
                                }
                                else if (mtype == "rw")
                                {
                                    mtype = "Read Write";
                                }

                                _systemMount = new MountInfo(dir, mount, type, mtype);

                                break; // TODO: might not be correct. Was : Exit While
                            }

                        }
                        catch 
                        {
                            dir = "/system";
                            mount = "ERROR";
                            type = MountType.NONE;
                            mtype = "Can't be Listed";
                            _systemMount = new MountInfo(dir, mount, type, mtype);

                        }
                    }
                }

                return _systemMount;
            }
        }

        #endregion

    }

}
